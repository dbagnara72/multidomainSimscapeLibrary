component hydrostatic_fourway_valve_bichamber_piston
% hydrostatic_fourway_valve_bichamber

% vp.der == 1/mp*((Ah*pc-Ar*ps)-bp*vp-kp*xp-fp);
% xp.der == vp;
% p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
% p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
% if xv > 0
%     q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p1))*sign(ps-p1);
%     q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p2-pt))*sign(p2-pt); 
% else
%     q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p1-pt))*sign(p1-pt);
%     q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p2))*sign(ps-p2);
% end


inputs
    xv = {0, 'mm'};      % xv:left
end
nodes
    S = foundation.hydraulic.hydraulic; % S:left
    T = foundation.hydraulic.hydraulic; % T:left
    P = foundation.mechanical.translational.translational;  % P:right
end
outputs
    xp_out = { 0, 'm' }; % xp:right
%     vp_out = { 0, 'm/s' }; % vp:right
%     mforce = { 0, 'N' }; % fm:right
    q1_out = { 0, 'l/min' }; % q1:right
    q2_out = { 0, 'l/min' }; % q2:right
    p1_out = { 0, 'bar' }; % p1:right
    p2_out = { 0, 'bar' }; % p2:right
end

parameters
%     bulk = { 1.2e9, 'Pa' };                 % Bulk Modulus
%     rho = { 850, 'kg/m^3' };                % Density
    D1 = { 0.191671031956003, 'm' };                     % D1
    D2 = { 0.191671031956003, 'm' };                     % D2
    Lp = { 0.02, 'm'};                         % Lp
    xv_max = { 1.2, 'mm' };                % xv max
    mp = { 1, 'kg' };                       % Piston mp
    kp = { 41e3, 'N/m' };                    % Spring kp
    bp = { 1e3, 'N*s/m'};                   % Spring bp
end
parameters(Access=private)
    delta_xv = { 0.01, 'mm'};          
    delta_xp = { 0.1, 'mm'};     
    tau = {0.01/(2*pi), 's'};        
    bhp = { 1e12, 'N*s/m'};  
end

variables
    q1 = { 0, 'm^3/s'};   % q1
    q2 = { 0, 'm^3/s'};   % q2    
    qin = { 0, 'm^3/s'};   % qin
    qout = { 0, 'm^3/s'};   % qout
    p1 = {value = { 0, 'bar'}, priority = priority.high};     % p1
    p2 = {value = { 0, 'bar'}, priority = priority.high};     % p2
    fp = { 0, 'N' };     % fp
    vp = { 0, 'm/s' };   % vp
    xp = {value = { 0, 'm'}, priority = priority.high};     % xp
end

branches
    fp : P.f -> *;
    qin : S.q -> *;
    qout: * -> T.q;
end

equations
    let
        A1 = D1^2/4*pi;
        A2 = D2^2/4*pi;
        V0 = A1*(Lp)*2;
        ps = S.p;
        pt = T.p;
        rho = S.density;
        bulk = S.bulk;
    in
            
        if (xp > Lp - delta_xp)
            vp == P.v;
            if xv > 0
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p1))*sign(ps-p1);
                q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p2-pt))*sign(p2-pt);                
                qin == q1;
                qout == q2;
            elseif xv < 0
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p1-pt))*sign(p1-pt);
                q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p2))*sign(ps-p2);
                qin == -q2;
                qout == -q1;
            else
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == 0;
                q2 == 0
                qin == 0;
                qout == 0;
            end
            p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
            p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
        elseif (xp < delta_xp - Lp)       
            vp == P.v;
            if xv > 0
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p1))*sign(ps-p1);
                q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p2-pt))*sign(p2-pt);                
                qin == q1;
                qout == q2;
            elseif xv < 0
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p1-pt))*sign(p1-pt);
                q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p2))*sign(ps-p2);
                qin == -q2;
                qout == -q1;
            else
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == 0;
                q2 == 0;
                qin == 0;
                qout == 0;
            end
            p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
            p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));

        else
            vp == P.v;
            if xv > 0
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p1))*sign(ps-p1);
                q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p2-pt))*sign(p2-pt);                
                qin == q1;
                qout == q2;
            elseif xv < 0
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(p1-pt))*sign(p1-pt);
                q2 == (xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p2))*sign(ps-p2);
                qin == -q2;
                qout == -q1;
            else
                vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;
                q1 == 0;
                q2 == 0;
                qin == 0;
                qout == 0;
            end
            p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
            p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
        end
       
        xp_out == xp;
%         vp_out == vp;
        q1_out == q1;
        q2_out == q2;
        p1_out == p1;
        p2_out == p2;
%         mforce == (A1*p1-A2*p2);
    end
end
annotations
    Icon = 'fourway_valve_bichamber_piston_open.jpg';
end
end
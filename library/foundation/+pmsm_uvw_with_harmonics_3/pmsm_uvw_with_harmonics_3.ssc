component pmsm_uvw_with_harmonics_3
% pmsm uvw with harmonics components ver 3

    nodes
        uu_p = foundation.electrical.electrical;            % _uu+_:left
        uu_n = foundation.electrical.electrical;            % _uu-_:left
        uv_p = foundation.electrical.electrical;            % _uv+_:left
        uv_n = foundation.electrical.electrical;            % _uv-_:left
        uw_p = foundation.electrical.electrical;            % _uw+_:left
        uw_n = foundation.electrical.electrical;            % _uw-_:left
        S = foundation.mechanical.rotational.rotational;    % _S_:right
    end
    inputs
        psi_m = { 0.03, 'V*s' }; % _psi_m_:left
    end
    outputs
        id_out = { 0, 'A' };                    % _id_:right
        iq_out = { 0, 'A' };                    % _iq_:right
        ud_out = { 0, 'V' };                    % _ud_:right
        uq_out = { 0, 'V' };                    % _uq_:right
        ed_out = { 0, 'V' };                    % _ed_:right
        eq_out = { 0, 'V' };                    % _eq_:right
        iu_out = { 0, 'A' };                    % _iu_:right
        iv_out = { 0, 'A' };                    % _iv_:right
        iw_out = { 0, 'A' };                    % _iw_:right
        psi_r_d_out = { 0, 'V*s' };               % _psi_r_d_:right
        psi_r_q_out = { 0, 'V*s' };               % _psi_r_q:right
        psi_r_alpha_out = { 0, 'V*s' };           % _psi_r_alpha_:right
        psi_r_beta_out = { 0, 'V*s' };            % _psi_r_beta:right
        tau_out = { 0, 'N*m' };                 % _torque_:right
        omega_out = { 0, 'rad/s' };             % _omega_elec_:right
        omega_m_out = { 0, 'rpm' };             % _omega_m_:right
        theta_out = { 0, 'rad' };               % _theta_elec_:right
        pin_out = { 0, 'kW' };                  % _pin_:right
        pout_out = { 0, 'kW' };                  % _pout_:right
    end

    parameters
        number_poles = {8, '1'};            % number_poles
        psi_m_p = {0.0, 'V*s'};             % psi_m
        Lmu = {50e-6, 'H'};                 % Lmu
        La = {1e-3, 'H'};                   % La
        Lb = {200e-6, 'H'};                 % Lb
        Rs = {10e-3,'Ohm'};                 % Rs
        J = { 2.5, 'kg*m^2'};               % J
        b = { 0.1, 'N*m/(rad/s)'};          % b
        b_square = { 0.1, 'N*m/(rad/s)^2'}; % b_square
        h3 = { 0.0, 'percent'}; % h3
        h5 = { 0.0, 'percent'}; % h5
        h7 = { 0.0, 'percent'}; % h7
        h11 = { 0.0, 'percent'}; % h11
        angle_error = { 0.0, 'rad'};        % angle_error
    end

    variables
        omega = { 0, 'rad/s' };              % omega 
        theta = { 0, 'rad' };                % theta 
        iu = { 0, 'A' };                     % iu
        iv = { 0, 'A' };                     % iv
        iw = { 0, 'A' };                     % iw
        id = { 0, 'A' };                     % id
        iq = { 0, 'A' };                     % iq
        uv = { 0, 'V' };                     % uv
        uu = { 0, 'V' };                     % uu
        uw = { 0, 'V' };                     % uw
        ud = { 0, 'V' };                     % ud
        uq = { 0, 'V' };                     % uq      
        
        psi_r_u = { 0, 'V*s'};                  % psi_r_u
        psi_r_v = { 0, 'V*s' };                 % psi_r_v
        psi_r_w = { 0, 'V*s' };                 % psi_r_w

        psi_s_d = { 0.0 , 'V*s' };             % psi_s_d
        psi_s_q = { 0.0, 'V*s' };              % psi_s_q
        psi_r_d = { 0.0 , 'V*s' };             % psi_r_d
        psi_r_q = { 0.0, 'V*s' };              % psi_r_q
        
        psi_r_alpha = { 0.0 , 'V*s' };         % psi_r_alpha
        psi_r_beta = { 0.0, 'V*s' };           % psi_r_beta
        psi_s_alpha = { 0.0 , 'V*s' };         % psi_s_alpha
        psi_s_beta = { 0.0, 'V*s' };           % psi_s_beta

        tau_l = { 0, 'N*m' };                % Load
        tau_m = { 0, 'N*m' };                % Electromagnetic torque
    end

    branches
        iu : uu_p.i -> uu_n.i;
        iv : uv_p.i -> uv_n.i;        
        iw : uw_p.i -> uw_n.i;
        tau_l : S.t ->*; 
    end


    equations
        let
            Ld = 3/2*(La-Lb);
            Lq = 3/2*(La+Lb);
            pp = number_poles/2;
        in   
            uu == uu_p.v - uu_n.v;
            uv == uv_p.v - uv_n.v;
            uw == uw_p.v - uw_n.v;

            omega == pp*S.w;
            
            uu - Rs * iu ...
                - omega*2*Lb*sin(2*theta)*iu - omega*2*Lb*sin(2*(theta-pi/3))*iv...
                - omega*2*Lb*sin(2*(theta+pi/3))*iw...
                - (Lmu+La-Lb*cos(2*theta)) * iu.der - (-1/2*La-Lb*cos(2*(theta-pi/3))) * iv.der - ...
                (-1/2*La-Lb*cos(2*(theta+pi/3))) * iw.der - psi_r_u.der  == 0;
            uv - Rs * iv ...
                - omega*2*Lb*sin(2*(theta-pi/3))*iu - omega*2*Lb*sin(2*(theta-2*pi/3))*iv...
                - omega*2*Lb*sin(2*(theta+pi))*iw...
                - (Lmu+La-Lb*cos(2*(theta-2*pi/3))) * iv.der - (-1/2*La-Lb*cos(2*(theta+pi))) * iw.der - ...
                (-1/2*La-Lb*cos(2*(theta-pi/3))) * iu.der - psi_r_v.der == 0;
            uw - Rs * iw ...
                - omega*2*Lb*sin(2*(theta+pi/3))*iu - omega*2*Lb*sin(2*(theta+pi))*iv...
                - omega*2*Lb*sin(2*(theta+2*pi/3))*iw...
                - (Lmu+La-Lb*cos(2*(theta+2*pi/3))) * iw.der - (-1/2*La-Lb*cos(2*(theta+pi/3))) * iu.der - ...
                (-1/2*La-Lb*cos(2*(theta+pi))) * iv.der - psi_r_w.der  == 0;

            psi_r_u.der == -omega * (psi_m * sin(theta) + 3*h3*psi_m * sin(3*theta)  ...
                - 5*h5*psi_m * sin(-5*theta) + 7*h7*psi_m * sin(7*theta) - ...
                11*h11*psi_m * sin(-11*theta));
            psi_r_v.der == -omega * (psi_m * sin(theta - 2*pi/3) + 3*h3*psi_m * sin(3*theta - 2*pi/3)  ...
                - 5*h5*psi_m * sin(-5*theta - 2*pi/3) + 7*h7*psi_m * sin(7*theta - 2*pi/3) - ...
                11*h11*psi_m * sin(-11*theta - 2*pi/3));
            psi_r_w.der == -omega * (psi_m * sin(theta + 2*pi/3) + 3*h3*psi_m * sin(3*theta + 2*pi/3)  ...
                - 5*h5*psi_m * sin(-5*theta + 2*pi/3) + 7*h7*psi_m * sin(7*theta + 2*pi/3) - ...
                11*h11*psi_m * sin(-11*theta + 2*pi/3));
           
            psi_r_d == 2/3*(psi_r_u*cos(theta) + psi_r_v*cos(theta-2*pi/3) + psi_r_w*cos(theta+2*pi/3));
            psi_r_q == -2/3*(psi_r_u*sin(theta) + psi_r_v*sin(theta-2*pi/3) + psi_r_w*sin(theta+2*pi/3));
        
            psi_r_alpha == psi_r_d*cos(theta) - psi_r_q*sin(theta);
            psi_r_beta == psi_r_d*sin(theta) + psi_r_q*cos(theta);

            psi_s_alpha == psi_s_d*cos(theta) - psi_s_q*sin(theta);
            psi_s_beta == psi_s_d*sin(theta) + psi_s_q*cos(theta);

            ud == 2/3*(uu*cos(theta) + uv*cos(theta-2*pi/3) + uw*cos(theta+2*pi/3));
            uq == -2/3*(uu*sin(theta) + uv*sin(theta-2*pi/3) + uw*sin(theta+2*pi/3));
            
            psi_s_q == psi_r_q + Lq*iq;
            psi_s_d == psi_r_d + Ld*id;
            
            id == 2/3 * (iu*cos(theta) + iv*cos(theta-2*pi/3) + iw*cos(theta+2*pi/3));
            iq == -2/3 * (iu*sin(theta) + iv*sin(theta-2*pi/3) + iw*sin(theta+2*pi/3));
            
            % tau_m == 3/2 * number_poles/2 * (psi_s_d * iq - psi_s_q * id);
            % tau_m == 3/2 * number_poles/2 * (psi_m * iq - 3 * Lb * id * iq);
            tau_m == -number_poles/2 * ((Ld-Lq)/3 * ((iu^2 - 0.5*iv^2 - 0.5*iw^2 - iu*iv ...
                    -iu*iw + 2*iv*iw)*sin(2*theta) + sqrt(3)/2*(iv^2 - iw^2 - 2*iu*iv + 2*iu*iw)*cos(2*theta)) ...
                    + psi_m*((iu - 0.5*iv - 0.5*iw)*sin(theta) - sqrt(3)/2*(iv-iw)*cos(theta)));
            
            J*omega.der == pp*tau_m - b*omega - b_square/pp*omega^2 + pp*tau_l;
            theta.der == omega;
    
            id_out == id;
            iq_out == iq;
            ud_out == ud;
            uq_out == uq;
            ed_out == -psi_r_q*omega;
            eq_out == psi_r_d*omega;
            iu_out == iu;
            iv_out == iv;
            iw_out == iw;
            psi_r_d_out == psi_r_d;
            psi_r_q_out == psi_r_q;
            psi_r_alpha_out == psi_r_alpha;
            psi_r_beta_out == psi_r_beta;
            tau_out == tau_m;
            theta_out == mod(theta+angle_error+3*pi, 2*pi) - pi;
            omega_out == omega;
            omega_m_out == omega/pp;
            pin_out == uv*iv + uw*iw + uu*iu;
            pout_out == (tau_m )*S.w;
        end
    end
end

component single_phase_trafo
% single phase trafo

    nodes
        u1_p = foundation.electrical.electrical; % _u1+_:left
        u1_n = foundation.electrical.electrical; % _u1-_:left        
        u2_p = foundation.electrical.electrical; % _u2+_:right
        u2_n = foundation.electrical.electrical; % _u2-_:right
    end
    
    outputs
%         Bc = { 0, 'Wb/m^2' }; % _Bc_:right
%         i1_out = { 0, 'A' }; % _i1_:right
%         i2_out = { 0, 'A' }; % _i2_:right
%         u1_out = { 0, 'V' }; % _u1_:right
%         u2_out = { 0, 'V' }; % _u2_:right
    end

    parameters
        mu0 = {1.256e-6, 'H/m'};            % mu0
        mur = {1e4, '1'};                   % mur
        lm = {0.1, 'm'};                    % lm
        Sm = {25e-4, 'm^2'};                % Sm
        n1 = {24, '1'};                     % n1
        n2 = {24, '1'};                     % n2
        R1 = {1e-4, 'Ohm'};                 % R1
        R2 = {1e-4, 'Ohm'};                 % R2
        Ld1 = {1e-6, 'H'};                  % Ld1
        Ld2 = {1e-6, 'H'};                  % Ld2
        Rfe = {2e3, 'Ohm'};                % Rfe
    end

    variables
        phi = { 0, 'V*s' };                     % phi
        i1 = { 0, 'A' };                        % i1
        i2 = { 0, 'A' };                        % i2
        ife = { 0, 'A' };                       % ife
        u1 = { 0, 'V' };                        % u1
        u2 = { 0, 'V' };                        % u2        
    end


    branches
        i1 : u1_n.i -> u1_p.i;
        i2 : u2_n.i -> u2_p.i;
    end

    equations
        let
            Reluctance = lm / (mu0 * mur * Sm);
        in
            u1 == u1_p.v - u1_n.v;
            u2 == u2_p.v - u2_n.v;

            u1 - R1 * i1 - Ld1 * i1.der + n1 * phi.der == 0;
            u2 - R2 * i2 - Ld2 * i2.der + n2 * phi.der == 0;

            ife == (u1 - R1 * i1 - Ld1 * i1.der) / Rfe;

            Reluctance * phi == (n1 * (i1-ife) + n2 * i2);

%             i1_out == i1;
%             i2_out == i2;        
%             u1_out == u1;
%             u2_out == u2;
%             Bc == (n1 * (i1-ife) + n2 * i2) / lm * (mu0 * mur);
        end
    end
end

component bichamber_piston
% bichamber piston

nodes
    H1 = foundation.hydraulic.hydraulic; % H1:left
    H2 = foundation.hydraulic.hydraulic; % H2:left
    P = foundation.mechanical.translational.translational;  % P:right
end
outputs
    xp_out = { 0, 'm' }; % xp:right
    vp_out = { 0, 'm/s' }; % vp:right
    mforce = { 0, 'N' }; % fm:right
    q1_out = { 0, 'l/min' }; % q1:right
    q2_out = { 0, 'l/min' }; % q2:right
    p1_out = { 0, 'bar' }; % p1:right
    p2_out = { 0, 'bar' }; % p2:right
end

parameters
    A1 = { 8e-3, 'm^2' };                  % A1
    A2 = { 8e-3, 'm^2' };                  % A2
    Lp = { 2, 'm'};                         % Lp
    mp = { 35, 'kg' };                     % Piston mp
    kp = { 0, 'N/m' };                     % Spring kp
    bp = { 1e3, 'N*s/m'};                  % Damping bp
    V0 = {5, 'l'};                         % tank volume
end
parameters(Access=private)
    delta_xp = { 5, 'mm'};     
    tau = {0.01/(2*pi), 's'};        
    bhp = { 1e12, 'N*s/m'};  
    khp = { 1e0, 'N/m'};  
    p0 = { 125e5, 'Pa'};  
end
variables
    q1 = { 0, 'm^3/s'};   % q1
    q2 = { 0, 'm^3/s'};   % q2    
    p1 = {value = { 125, 'bar'}, priority = priority.high};     % p1
    p2 = {value = { 125, 'bar'}, priority = priority.high};     % p2
    fp = { 0, 'N' };     % fp
    vp = { 0, 'm/s' };   % vp
    xp = {value = { 0.0, 'm'}, priority = priority.high};     % xp
end

branches
    fp : P.f -> *;
    q1 : H1.q -> *;
%     q2 : * -> H2.q; %driven from pump
    q2 : H2.q -> *; %driven from valves
end

equations
    let
        rho = H1.density;
        bulk1 = H1.bulk;
        bulk2 = H2.bulk;
    in     
        p1 == H1.p;
        p2 == H2.p;
        
        vp == P.v;
        vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
        xp.der == vp;           
        p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
        p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
        
%         if (xp > Lp - delta_xp)
%             vp == P.v;
%             vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-khp*(xp-Lp+delta_xp)-fp);
%             xp.der == vp;
%             p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
%         elseif (xp < delta_xp)       
%             vp == P.v;
%             vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-khp*(xp-delta_xp)-fp);
%             xp.der == vp;         
%             p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
%         else
%             vp == P.v;
%             vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;           
%             p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
%         end

        xp_out == xp;
        vp_out == vp;
        q1_out == q1;
        q2_out == q2;
        p1_out == p1;
        p2_out == p2;
        mforce == (A1*p1-A2*p2);
    end
end
end



component linear_actuator_phy
% linear_actuator_phy

nodes
    XV = foundation.mechanical.translational.translational; % XV:right
    UCp = foundation.electrical.electrical; % UCp:left
    UCn = foundation.electrical.electrical; % UCn:left
end
outputs
    valve_x = { 0, 'm' }; % valve position:right
    ic = { 0, 'A' }; % coil current:right
end

parameters
    Bm = { 1, 'V*s/m^2' };      % Permanent Magnet Flow
    m = { 0.05, 'kg' };         % Valve mass
    L = { 0.01, 'H'};           % Coil Inductance
    R = { 0.25, 'Ohm'};            % Coil Resistance
    b = { 2000, 'N*s/m'};       % valve Damping
    h = { 0.05, 'm'};           % Coil length
    xv_max = { 0.004, 'm'};    % maximum valve opening
    N = { 40, '1'};             % Number of spire
end

variables
    uc = { 0, 'V' };                                            % u
    i = {value = { 0, 'A'}, priority = priority.high};          % i
    vv = { 0, 'm/s'};                                           % vv
    xv = { 0, 'm'};                                             % xv
    fv = { 0, 'N'};                                             % fv
end

branches
    i : UCp.i -> UCn.i; 
    fv : XV.f ->*; 
end
    
equations
    uc == UCp.v - UCn.v;
    vv == XV.v;
    if uc > 0
            if xv > xv_max
                xv.der == 0;
                vv.der == 0;
                i.der == -R/L*i+1/L*uc;
            else
                xv.der == vv;
                vv.der == Bm*h*N/m*i-b/m*vv;
                i.der == -R/L*i-Bm/L*h*vv+1/L*uc;
            end
    elseif uc < 0
            if xv < -xv_max
                xv.der == 0;
                vv.der == 0;
                i.der == -R/L*i+1/L*uc;
            else
                xv.der == vv;
                vv.der == Bm*h*N/m*i-b/m*vv;
                i.der == -R/L*i-Bm/L*h*vv+1/L*uc;
            end
    else
        xv.der == 0;
        vv.der == 0;
        i.der == -R/L*i+1/L*uc;
    end
    i == ic;
    xv == valve_x;
end
end

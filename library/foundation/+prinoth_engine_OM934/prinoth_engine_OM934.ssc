component prinoth_engine_OM934
% Prinoth Engine OM934:2

inputs
    % Engine throttle 
    theta = {0, '1'};                    % theta:left
end

outputs
    % Engine power
    Pe = {0, 'kW'};                     % Pe:right
    % Engine speed
    we = {0, 'rpm'};                    % we:right
    % Engine torque
    te = {0, 'N*m'};                    % te:right        
    % Specific engine consumption
    sfc = {0, 'g/(kW*hr)'};             % sfc:right    
    % Engine consumption
%     fc = {0, 'g'};                      % fc:right    
    fc = {0, 'l'};                      % fc:right    
end

nodes
   C = foundation.mechanical.rotational.rotational; % C:left
   D = foundation.mechanical.rotational.rotational; % D:right
end

parameters
    cshaft_inertia = { 0.73, 'kg*m^2' };           % System inertia
    initial_speed = { 5, '1' };                    % Initial speed (rpm)
    diesel_density = { 0.85, 'kg/l' };             % Diesel density speed
end

parameters(Access=private) 
    
    rpm_consumption = {[800 900 1000 1100 1200 1300 1400 1500 ...
        1600 1700 1800 1900 2000 2100 2200 2300 2400], 'rpm'};

    power_consumption = {[10 20 30 40 50 60 70 80 90 100 110 120 130 140 ...
        150 160 170 180], 'kW'};
        
    consumption = {[...
        140.0 145.0 150.0 152.0 156.0 160.0 164.0 168.0 175.0 180.0 185.0 192.0 200.0 225.0 250.0 275.0 300.0; ...
        118.0 119.0 120.0 125.0 130.0 135.0 137.5 140.0 148.0 151.0 158.0 165.0 180.0 195.0 215.0 230.0 245.0; ...
        114.0 112.5 112.5 112.5 114.0 117.0 119.0 120.0 125.0 130.0 135.0 142.5 148.0 152.0 160.0 175.0 190.0; ...
        111.0 108.5 107.0 106.5 108.0 109.5 110.2 112.5 115.0 117.5 120.0 126.0 132.0 138.0 144.0 150.0 160.0; ...
        110.0 107.5 106.0 105.2 105.2 105.5 106.5 107.5 109.0 111.0 113.5 116.2 118.5 122.5 128.0 135.0 155.0; ...
        112.0 107.5 104.5 104.0 103.0 103.5 104.0 105.0 107.0 108.0 109.5 112.0 115.0 117.5 120.0 135.0 155.0; ...
        115.0 108.0 104.0 102.5 101.8 101.8 102.0 103.5 104.2 105.2 107.0 108.0 111.2 113.5 116.0 119.0 150.0; ...
        115.0 108.0 103.5 102.0 100.8 100.9 101.1 101.8 103.0 104.0 105.0 106.5 108.0 110.0 113.5 117.0 125.0; ...
        120.0 115.0 106.0 102.0 100.0 099.8 100.0 101.0 101.8 102.5 103.8 105.0 106.5 108.0 110.0 115.0 130.0; ...
        122.5 112.5 106.0 102.1 100.0 099.8 099.8 100.5 101.0 101.8 102.8 103.8 105.1 107.2 109.0 115.0 125.0; ...
        125.0 120.0 110.0 105.0 100.8 099.8 099.8 099.8 100.5 101.2 102.0 103.2 104.2 106.5 108.0 111.0 120.0; ...
        127.5 125.0 112.0 108.0 102.0 100.0 099.8 099.8 100.5 101.0 101.7 103.0 104.0 105.8 107.5 110.0 118.0; ...
        128.5 126.0 114.0 110.0 104.0 102.0 100.8 100.2 100.8 101.2 101.8 102.8 103.6 105.0 108.0 110.0 115.0; ...
        130.0 128.0 116.0 112.0 106.0 104.0 102.0 101.0 100.8 101.2 101.6 102.5 103.2 104.8 106.5 108.5 112.0; ...
        132.0 130.0 118.0 114.0 108.0 106.0 104.0 102.0 101.8 101.5 101.9 102.8 103.4 104.9 106.4 107.5 111.0; ...
        134.0 132.0 120.0 116.0 110.0 108.0 106.0 104.0 102.5 102.1 102.8 103.4 104.2 105.0 107.2 108.5 112.0; ...
        136.0 134.0 121.5 117.2 111.2 109.2 107.0 104.8 103.2 102.8 103.6 104.2 106.0 108.0 110.0 112.5 115.0; ...
        138.0 136.0 123.0 119.0 112.5 110.6 108.5 106.0 105.0 104.2 105.6 106.2 108.0 110.0 112.0 115.0 118.0 ...
        ]./100*185, 'g/(kW*hr)'};

    
    rpm = {[-2400 -2300 -2200 -2100 -2000 -1900 -1800 -1700 -1600 -1500 ...
        -1400 -1300 -1200 -1100 -1000 -900 -800 -700 -600 -400 -250 -50 ...
        50 250 400 600 700 800 900 1000 1100 1200 1300 1400 1500 ...
        1600 1700 1800 1900 2000 2100 2200 2300 2400], 'rpm'};
    
    torque_friction = {[120 115 110 105 100 95 90 85 80 75 70 65 60 ...
        55 50 45 40 35 30 25 20 15 -15 -20 -25 -30 -35 -40 -45 -50 ...
        -55 -60 -65 -70 -75 -80 -85 -90 -95 -100 -105 -110 -115 -120]./2, 'N*m'};
    
    torque_nom = {[ -245 -490 -730 -750 -800 -840 -900 -930 -950 -950 ...
        -950 -950 -950 -900 -830 -770 -710 -600 -500 -400 -300 -50 50 ...
        300 400 500 600 710 770 830 900 950 950 950 950 950 930 900 840 ...
        800 750 730 490 24], 'N*m'} - torque_friction;
 
    a0_throttle = {(2*pi*25)^2, '1/s^2'}     % Throttle model parameter wn^2
    a1_throttle = {(4*pi*25), '1/s'}     % Throttle model parameter 2*zeta*wn    
    a0_ebs = {(2*pi*5)^2, '1/s^2'}     % Throttle model parameter wn^2
    a1_ebs = {(2*1*2*pi*5), '1/s'}     % Throttle model parameter 2*zeta*wn
end

branches    
    t_in: C.t -> *;
    t_out : * -> D.t;
end

variables(Access=private)
    w = {value = {initial_speed,'rpm'}, priority = priority.high}; % Rotational speed (rpm)
%     w = {value = {initial_speed,'rpm'}}; % Rotational speed (rpm)
    t_in = {0, 'N*m'};                    % Input shaft torque
    t_out = {0, 'N*m' };                  % Load shaft torque
    t_b = {0, 'N*m' };                    % Friction torque
    throttle = {0, '1' };                  % Input shaft torque from engine map
    y_throttle = {0, '1' };               % Input shaft torque after second order filter as model of the throttle
    x1_throttle = {0, 's^2' };            % state variable of the second order filter as model of the throttle
    x2_throttle = {0, 's' };              % state variable of the second order filter as model of the throttle
end

equations
    let 

    in

       % Torque limit extrapolation
       t_in == tablelookup(rpm, torque_nom, w, interpolation = smooth, extrapolation = linear);
       t_b == tablelookup(rpm, torque_friction, w, interpolation = smooth, extrapolation = linear);
       theta/100 == throttle;
       
       % throttle model as second order filter with delay
       x1_throttle.der == x2_throttle;
       x2_throttle.der == -a0_throttle * x1_throttle - a1_throttle * x2_throttle + (throttle);
       y_throttle == a0_throttle * x1_throttle;

       % Physical equation 
       w == (D.w - C.w);
       te == t_in*y_throttle + t_b;
       w.der*cshaft_inertia == t_in*y_throttle + t_b - t_out;
       we == w;
       Pe == t_in*y_throttle*w;
              
       sfc == tablelookup(power_consumption, rpm_consumption, consumption, Pe, w, ...
           interpolation = smooth, extrapolation = linear);
       fc.der == Pe*sfc/diesel_density;
              
    end
end

% annotations
%     Icon = '../icons/Mercedes_Benz_engine_OM471.jpg';
% end
end



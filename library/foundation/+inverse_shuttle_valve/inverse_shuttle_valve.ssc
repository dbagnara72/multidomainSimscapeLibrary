component inverse_shuttle_valve
 % inverse shuttle valve: 2


nodes
    cA = foundation.hydraulic.hydraulic; % cA:left
    cB = foundation.hydraulic.hydraulic; % cB:left
    cP = foundation.hydraulic.hydraulic; % cP:right
end

variables
    qA = {0 , 'm^3/s'};             % Volumetric flow through A line
    qB = {0 , 'm^3/s'};             % Volumetric flow through B line
    qP = {0 , 'm^3/s'};             % Volumetric flow through P line
    dp = {0 , 'Pa'};                % Differential Pressure
    dpAP = {0 , 'Pa'};                % Differential Pressure PA
    dpBP = {0 , 'Pa'};                % Differential Pressure PB
    x_rv_AP = { 0, 'm' };              % valve opening AP
    x_rv_BP = { 0, 'm' };              % valve opening BP
    x_rv_AP_flt = { 0, 'm' };              % valve opening AP filtered
    x_rv_BP_flt = { 0, 'm' };              % valve opening BP filtered
end
variables (Access=private) 
    x1_AP = { 0, 'm*s^2' };            % state variable of the second order filter as model of the relef valve
    x2_AP = { 0, 'm*s' };              % state variable of the second order filter as model of the relef valve
    x1_BP = { 0, 'm*s^2' };            % state variable of the second order filter as model of the relef valve
    x2_BP = { 0, 'm*s' };              % state variable of the second order filter as model of the relef valve
end
branches
    qA: cA.q -> *;
    qB: cB.q -> *;
    qP: cP.q -> *;
end

parameters
    pnom = {32, 'bar'};                        % nominal operative pressure
    dp_crack = {16, 'bar'};                    % cracking pressure setting
    dp_reg = {4, 'bar'};                       % delta pressure valve regulation range
    x_rv_max = {2.0, 'mm'};                    % maximum valve orifice
    a0 = {(2*pi*10)^2, '1/s^2'}                % second order filter wn^2 term
    a1 = {(2*2*pi*10), '1/s'}                  % second order filter 2*zeta*wn term
    leak = {5e-12, 'm^3/s/Pa'};                % leakage factor
end
equations
    let
      k = x_rv_max/dp_reg;
      dp_max = dp_crack + dp_reg;
      kq = x_rv_max*sqrt(2.0/cA.density*pnom);
      kc = x_rv_max/sqrt(2.0*cA.density*pnom);
      rho = cA.density;
      bulk = cA.bulk;
    in   
      cA.p - cB.p == dp;
      cA.p - cP.p == dpAP;
      cB.p - cP.p == dpBP; 
      
%       if dp >= dp_max
%           x_rv_AP == 0;
%           x_rv_BP == x_rv_max;
%       elseif (-dp_crack <= dp) & (dp <= dp_crack)
%           x_rv_AP == 0;
%           x_rv_BP == 0;
%       elseif (dp_crack < dp) & (dp < dp_max)
%           x_rv_AP == 0;
%           x_rv_BP == k*(abs(dp) - dp_crack);
%       elseif (-dp_max < dp) & (dp < -dp_crack)
%           x_rv_AP == k*(abs(dp) - dp_crack);
%           x_rv_BP == 0;
%       else
%           x_rv_AP == x_rv_max;
%           x_rv_BP == 0;
%       end
      
      if dp > dp_max
          x_rv_AP == 0;
          x_rv_BP == x_rv_max;
      elseif dp < -dp_max
          x_rv_AP == x_rv_max;
          x_rv_BP == 0;
      else
          x_rv_AP == 0;
          x_rv_BP == 0;
      end
      
      x1_AP.der == x2_AP;
      x2_AP.der == -a0 * x1_AP - a1 * x2_AP + x_rv_AP;
      x_rv_AP_flt == a0 * x1_AP;
      
      x1_BP.der == x2_BP;
      x2_BP.der == -a0 * x1_BP - a1 * x2_BP + x_rv_BP;
      x_rv_BP_flt == a0 * x1_BP;
      
      qA == x_rv_AP_flt*x_rv_max*sqrt(2/rho)*sqrt(abs(dpAP));
      qB == x_rv_BP_flt*x_rv_max*sqrt(2/rho)*sqrt(abs(dpBP));
      
%       qA == x_rv_AP*x_rv_max*sqrt(2/rho)*sqrt(abs(dpAP));
%       qB == x_rv_BP*x_rv_max*sqrt(2/rho)*sqrt(abs(dpBP));
      
      qP == - qA - qB;
    end
end
end







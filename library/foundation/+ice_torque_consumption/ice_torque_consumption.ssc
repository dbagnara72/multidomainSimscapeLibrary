component ice_torque_consumption
% Generic Internal Combustion Engine with Torque Consumption Reference:2

inputs
    % Engine throttle 
    theta = {0, '1'};                    % theta:left
end

outputs
    % Engine power
    Pe = {0, 'kW'};                     % Pe:right
    % Engine speed
    omega_e_out = {0, 'rpm'};                    % omega_e:right
    % Engine torque
    tau_d_out = {0, 'N*m'};                    % tau_d:right        
    % Specific engine consumption
    sfc = {0, 'g/(kW*hr)'};             % sfc:right    
    % Engine consumption
    fc = {0, 'l'};                      % fc:right    
end

nodes
   C = foundation.mechanical.rotational.rotational; % C:left
   D = foundation.mechanical.rotational.rotational; % D:right
end

parameters
    cshaft_inertia = { 0.73, 'kg*m^2' };           % System inertia
    initial_speed = { 5, '1' };                    % Initial speed (rpm)
    diesel_density = { 0.85, 'kg/l' };             % Diesel density speed
end

parameters
    rpm_consumption = {0, 'rpm'};
    torque_consumption = {0, 'N*m'};
    consumption = {0, 'g/(kW*hr)'};

    rpm_base = {0, 'rpm'};
    torque_friction_base = {0, 'N*m'};  
    torque_base = {0, 'N*m'};
 
end

parameters(Access=private)
    a0_throttle = {(2*pi*25)^2, '1/s^2'}     % Throttle model parameter wn^2
    a1_throttle = {(4*pi*25), '1/s'}     % Throttle model parameter 2*zeta*wn    
    a0_ebs = {(2*pi*5)^2, '1/s^2'}     % Throttle model parameter wn^2
    a1_ebs = {(2*1*2*pi*5), '1/s'}     % Throttle model parameter 2*zeta*wn
end

branches    
    tau_e: C.t -> *;
    tau_load : * -> D.t;
end

variables(Access=private)
    omega_e = {value = {initial_speed,'rpm'}, priority = priority.high}; % Rotational speed (rpm)
    tau_e = {0, 'N*m'};                   % engine torque
    tau_d = {0, 'N*m' };                  % engine available torque at shaft 
    tau_b = {0, 'N*m' };                  % Friction torque
    tau_load = {0, 'N*m'};                % load torque
    throttle_ref = {0, '1' };             % reference throttle
    y_throttle = {0, '1' };               % throttle
    x1_throttle = {0, 's^2' };            % state variable of the second order filter as model of the throttle
    x2_throttle = {0, 's' };              % state variable of the second order filter as model of the throttle
end

equations
    % Torque limit extrapolation
    tau_e == tablelookup(rpm_base, (torque_base-torque_friction_base), ...
        omega_e, interpolation = smooth, extrapolation = linear);
    tau_b == tablelookup(rpm_base, torque_friction_base, omega_e, ...        
    interpolation = smooth, extrapolation = linear);
    theta/100 == throttle_ref;
    
    % throttle model as second order filter with delay
    x1_throttle.der == x2_throttle;
    x2_throttle.der == -a0_throttle * x1_throttle - a1_throttle * x2_throttle + (throttle_ref);
    y_throttle == a0_throttle * x1_throttle;
    
    % Physical equation 
    omega_e == (D.w - C.w);
    tau_d == tau_e*y_throttle + tau_b;
    omega_e.der*cshaft_inertia == tau_d - tau_load;

    omega_e_out == omega_e;
    tau_d_out == tau_d;
    Pe == tau_e*y_throttle*omega_e;
          
    sfc == tablelookup(torque_consumption, rpm_consumption, consumption, tau_d, omega_e, ...
       interpolation = smooth, extrapolation = linear);
    fc.der == Pe*sfc/diesel_density;
    end
    
end



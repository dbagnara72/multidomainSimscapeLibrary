component im
% im


    nodes
        S = foundation.mechanical.rotational.rotational; % S:right
        u_alpha_p = foundation.electrical.electrical; % u_alpha+:left
        u_alpha_n = foundation.electrical.electrical; % u_alpha-:left
        u_beta_p = foundation.electrical.electrical; % u_beta+:left
        u_beta_n = foundation.electrical.electrical; % u_beta-:left
    end

    outputs
        is_alpha = { 0, 'A' }; % is_alpha:right
        is_beta = { 0, 'A' }; % is_beta:right
        ir_alpha = { 0, 'A' }; % ir_alpha:right
        ir_beta = { 0, 'A' }; % ir_beta:right
        psi_alpha = { 0, 'V*s' }; % psi_alpha:right
        psi_beta = { 0, 'V*s' }; % psi_beta:right
    end

    parameters
        Lm = {0.00532612, 'H'};        % Lm
        Rs = {0.00221333,'Ohm'};         % Rs
        Lr = {0.00544522, 'H'};          % Lr
        Ls = {0.00544522, 'H'};          % Ls
        Rr = {0.00473653,'Ohm'};         % Rr
        J = { 1, 'kg*m^2' };        % J
        cp = { 3, '1' };            % pole pairs
    end

    variables(Access = private)
        omega = { 0, 'rad/s' };                                         % omega 
        ia = { 0, 'A' };                                                % i alpha
        ua = { 0, 'V' };                                                % u alpha
        psi_a = {value = { 1 , 'V*s' }, priority = priority.high};      % psi alpha
        ib = { 0, 'A' };                                                % i beta
        ub = { 0, 'V' };                                                % u beta 
        psi_b = { 0, 'V*s' };                                           % psi beta
        tau = { 0, 'N*m' };                                             % Torque
    end


    branches
        ia : u_alpha_p.i -> u_alpha_n.i;
        ib : u_beta_p.i -> u_beta_n.i;
        tau : S.t ->*; 
    end

    equations
        let
            mu = 3/2*cp*Lm/J/Lr;
            alpha = Rr/Lr;
            sigma = Ls*(1-Lm^2/Lr/Ls);
            beta = Lm/sigma/Lr;
            gamma = Rs/sigma + beta*alpha*Lm;
        in
            ua == u_alpha_p.v - u_alpha_n.v;
            ub == u_beta_p.v - u_beta_n.v;
            omega == cp*S.w

            ia.der == -gamma*ia+ua/sigma+beta*alpha*psi_a+beta*omega*psi_b;
            ib.der == -gamma*ib+ub/sigma+beta*alpha*psi_b-beta*omega*psi_a;

            psi_a.der == -alpha*psi_a-omega*psi_b+alpha*Lm*ia;
            psi_b.der == -alpha*psi_b+omega*psi_a+alpha*Lm*ib;
        
            omega.der == mu*(psi_a*ib-psi_b*ia)+tau/J;

            is_alpha == ia;
            is_beta == ib;
            ir_alpha == -Lm/Lr*ia+1/Lr*psi_a;
            ir_beta == -Lm/Lr*ib+1/Lr*psi_b;
            psi_alpha == psi_a;
            psi_beta == psi_b;
        end
    end
end

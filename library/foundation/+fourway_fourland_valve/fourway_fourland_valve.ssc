component fourway_fourland_valve
% fourway fourland valve

inputs
    xv = {0, 'mm'};      % xv:left
    x0 = {0, 'mm'};      % x0:left
end
nodes
    S = foundation.hydraulic.hydraulic; % S:left
    T = foundation.hydraulic.hydraulic; % T:left
    H1 = foundation.hydraulic.hydraulic; % H1:right
    H2 = foundation.hydraulic.hydraulic; % H2:right
end

parameters                        
    xv_max = { 2.75, 'mm' };  % xv max 
end

parameters(Access=private)
    delta_xv = { 0.1, 'mm'};          
    tau = {0.01/(2*pi), 's'};        
    bhp = { 1e12, 'N*s/m'};  
    p0 = { 125e5, 'Pa'};  
end

variables
    ps = { 0, 'bar'};   % ps
    pt = { 0, 'bar'};   % pt    
    q1 = { 0, 'm^3/s'};   % q1
    q2 = { 0, 'm^3/s'};   % q2    
    q3 = { 0, 'm^3/s'};   % q3
    q4 = { 0, 'm^3/s'};   % q4    
    q5 = { 0, 'm^3/s'};   % q5
    q6 = { 0, 'm^3/s'};   % q6    
    qs = { 0, 'm^3/s'};   % qs
    qt = { 0, 'm^3/s'};   % qt
%     p1 = {value = { 0, 'bar'}, priority = priority.high};     % p1
%     p2 = {value = { 0, 'bar'}, priority = priority.high};     % p2
    p1 = { 0, 'bar'};     % p1
    p2 = { 0, 'bar'};     % p2
end

branches
    qs : S.q -> *;
    qt : T.q -> *;    
    q1 : H1.q -> *;
    q2 : H2.q -> *;
end

equations
    let
        kq = xv_max*sqrt(2.0/S.density*(p0));
        kc = xv_max*x0/sqrt(2.0*S.density*(p0));
        rho = S.density;
        bulk = S.bulk;
    in     
        ps == S.p;
        pt == T.p;  
        p1 == H1.p;
        p2 == H2.p;
        if xv > x0 
            q3 == (x0+xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p1))*sign(ps-p1);
            q4 == 0;
            q5 == 0;
            q6 == (x0+xv)*xv_max*sqrt(2/rho)*sqrt(abs(p2-pt))*sign(p2-pt);
        elseif xv < -x0
            q3 == 0;
            q4 == (x0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(p1-pt))*sign(p1-pt);
            q5 == (x0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p2))*sign(ps-p2);
            q6 == 0;   
        else  
            q3 == (x0+xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p1))*sign(ps-p1);
            q4 == (x0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(p1-pt))*sign(p1-pt);
            q5 == (x0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-p2))*sign(ps-p2);
            q6 == (x0+xv)*xv_max*sqrt(2/rho)*sqrt(abs(p2-pt))*sign(p2-pt); 
        end
        q1 == -q3 + q4;
        q2 == -q6 + q5;           
        qs == q3 + q5;
        qt == q6 + q4; 
    end
end
% annotations
%     Icon = 'icon.jpg';
% end
end






% inputs
%     xv = {0, 'mm'};      % xv:left
% end
% nodes
%     S = foundation.hydraulic.hydraulic; % S:left
%     T = foundation.hydraulic.hydraulic; % T:left
%     P = foundation.mechanical.translational.translational;  % P:right
% end
% outputs
%     xp_out = { 0, 'm' }; % xp:right
%     mforce = { 0, 'N' }; % fm:right
%     q1_out = { 0, 'l/min' }; % q1:right
%     q2_out = { 0, 'l/min' }; % q2:right
%     p1_out = { 0, 'bar' }; % p1:right
%     p2_out = { 0, 'bar' }; % p2:right
% end
% 
% parameters
%     bulk = { 1.2e9, 'Pa' };                 % Bulk Modulus
%     rho = { 850, 'kg/m^3' };                % Density
%     D1 = { 0.10, 'm' };                     % D1
%     D2 = { 0.10, 'm' };                     % D2
%     Lp = { 1, 'm'};                         % Lp
%     xv_max = { 4.00, 'mm' };                % xv max
%     mp = { 25, 'kg' };                       % Piston mp
%     kp = { 1e5, 'N/m' };                    % Spring kp
%     bp = { 200, 'N*s/m'};                   % Spring bp
% end
% parameters(Access=private)
%     delta_xv = { 0.1, 'mm'};          
%     delta_xp = { 2, 'mm'};     
%     tau = {0.01/(2*pi), 's'};        
%     bhp = { 1e12, 'N*s/m'};  
%     p0 = { 125e5, 'Pa'};  
% end
% 
% variables
%     q1 = { 0, 'm^3/s'};   % q1
%     q2 = { 0, 'm^3/s'};   % q2    
%     qin = { 0, 'm^3/s'};   % qin
%     qout = { 0, 'm^3/s'};   % qout
%     p1 = {value = { 0, 'bar'}, priority = priority.high};     % p1
%     p2 = {value = { 0, 'bar'}, priority = priority.high};     % p2
%     fp = { 0, 'N' };     % fp
%     vp = { 0, 'm/s' };   % vp
%     xp = {value = { 0, 'm'}, priority = priority.high};     % xp
% end
% 
% branches
%     fp : P.f -> *;
%     qin : S.q -> *;
%     qout: * -> T.q;
% end
% 
% equations
%     let
%         A1 = D1^2/4*pi;
%         A2 = D2^2/4*pi;
%         V0 = 2*A1*(Lp);
%         ps = S.p;
%         pt = T.p;
%         kq = xv_max*sqrt(2.0/S.density*(p0));
%         kc = xv_max^2/sqrt(2.0*S.density*(p0));    
% in
%             
%         if (xp > Lp - delta_xp)
%             vp == P.v;
%             if xv > 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 0;
%                 q2 == 0;
%                 qin == 0;
%                 qout == 0;
%             elseif xv < 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == q2;
%                 qout == q1;
%             else
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == 0;
%                 qout == 0;
%             end
%             p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
%         elseif (xp < delta_xp - Lp)       
%             vp == P.v;
%             if xv > 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);               
%                 qin == q1;
%                 qout == q2;
%             elseif xv < 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 0;
%                 q2 == 0;
%                 qin == 0;
%                 qout == 0;
%             else
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == 0;
%                 qout == 0;
%             end
%             p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
%         else
%             vp == P.v;
%             if xv > 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);              
%                 qin == q1;
%                 qout == q2;
%             elseif xv < 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == q2;
%                 qout == q1;
%             else
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == 0;
%                 qout == 0;
%             end
%             p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
%         end
%        
%         xp_out == xp;
%         q1_out == q1;
%         q2_out == q2;
%         p1_out == p1;
%         p2_out == p2;
%         mforce == (A1*p1-A2*p2);
%     end
% end
% % annotations
% %     Icon = 'fourway_valve_bichamber_piston_open.jpg';
% % end
% end
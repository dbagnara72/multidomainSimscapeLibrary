component hydrostatic_threeway_valve_bichamber_piston
% hydrostatic_threeway_valve_bichamber_piston

% vp.der == 1/mp*((Ah*pc-Ar*ps)-bp*vp-kp*xp-fp);
% xp.der == vp;
% 
% if xv > xv_0
%     q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
%     qv == (xv_0 + xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-pc))*sign(ps-pc);
%     q == qv - q_leak;
%     qs == qv - q*Ar/Ah;
% elseif xv < -xv_0
%     q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
%     qv == 0;
%     q == - (xv_0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(pc))*sign(pc) - q_leak;
%     qs == qv - q*Ar/Ah;
% else
%     q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
%     qv == (xv_0+xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-pc))*sign(ps-pc);
%     q == qv - (xv_0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(pc))*sign(pc) - q_leak;
%     qs == qv - q*Ar/Ah;
% end
% pc.der == bulk*((q-Ah*vp)/(V0+Ah*xp));


inputs
    xv = {0, 'm'};      % xv:left
end
nodes
    cA = foundation.hydraulic.hydraulic; % cA:left
    cB = foundation.hydraulic.hydraulic; % cB:left
    P = foundation.mechanical.translational.translational;  % P:right
end
outputs
    xp_out = { 0, 'm' }; % xp:right
    mforce = { 0, 'N' }; % fm:right
    flowC = { 0, 'l/min' }; % flowC:right
    pC = { 0, 'bar' }; % pC:right
end

parameters
%     bulk = { 1.2e9, 'Pa' };                 % Bulk Modulus
%     rho = { 850, 'kg/m^3' };                % Density
    Dh = { 0.10, 'm' };                     % Dh
    Dr = { 0.05, 'm' };                     % Dr
    Lp = { 1, 'm'};                         % Lp
    xv_max = { 2.25, 'mm' };                % xv max
    mp = { 1, 'kg' };                       % Piston mp
    kp = { 1e3, 'N/m' };                    % Spring kp
    bp = { 200, 'N*s/m'};                   % Spring bp
end
parameters(Access=private)
    delta_xv = { 0.01, 'mm'};          
    delta_xp = { 0.1, 'mm'};          
    tau = {0.01/(2*pi), 's'};        
    xv_0 = { 0.01, 'mm' };     
    bhp = { 1e12, 'N*s/m'};  
    xp_leak = { 0, 'mm' }; 
end

variables
    qs = { 0, 'm^3/s'};  % qs
    qv = { 0, 'm^3/s'};  % qs
    q = { 0, 'm^3/s'};   % q
    q_leak = { 0, 'm^3/s'};   % q_leak
    pc = {0, 'bar'};  % pc
    fp = { 0, 'N' };     % fp
    vp = { 0, 'm/s' };   % vp
    xp = {value = { 10, 'mm'}, priority = priority.high};     % xp
end

branches
    fp : P.f -> *;
    qs : cA.q -> cB.q;    
end

equations
    let
        Ah = Dh^2/4*pi;
        Ar = Dr^2/4*pi;
        V0 = 2*Ah*(Lp);
        ps = cA.p - cB.p;
        rho = cA.density;
        bulk = cA.bulk;
    in
            
        if (xp > Lp - delta_xp) && (xv > -xv_0)
            vp == P.v;
            vp.der == 1/mp*((Ah*pc-Ar*ps)-bp*vp-bhp*vp-kp*xp-fp);
            xp.der == vp;
            q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
            qv == (xv_0)*xv_max*sqrt(2/rho)*sqrt(abs(ps-pc))*sign(ps-pc);
            q == qv - (xv_0)*xv_max*sqrt(2/rho)*sqrt(abs(pc))*sign(pc) - q_leak;
            qs == qv - q*Ar/Ah;
            pc.der == bulk*((q-Ah*vp)/(V0+Ah*xp));

        elseif (xp < delta_xp) && (xv < xv_0)       
            vp == P.v;
            vp.der == 1/mp*((Ah*pc-Ar*ps)-bp*vp-bhp*vp-kp*xp-fp);
            xp.der == vp;
            q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
            qv == (xv_0)*xv_max*sqrt(2/rho)*sqrt(abs(ps-pc))*sign(ps-pc);
            q == qv - (xv_0)*xv_max*sqrt(2/rho)*sqrt(abs(pc))*sign(pc) - q_leak;
            qs == qv - q*Ar/Ah;
            pc.der == bulk*((q-Ah*vp)/(V0+Ah*xp));
        else
            vp == P.v;
            vp.der == 1/mp*((Ah*pc-Ar*ps)-bp*vp-kp*xp-fp);
            xp.der == vp;
            if xv > xv_0
                q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
                qv == (xv_0 + xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-pc))*sign(ps-pc);
                q == qv - q_leak;
                qs == qv - q*Ar/Ah;
            elseif xv < -xv_0
                q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
                qv == 0;
                q == - (xv_0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(pc))*sign(pc) - q_leak;
                qs == qv - q*Ar/Ah;
            else
                q_leak == xp_leak^2*sqrt(2/rho)*sqrt(abs(pc-ps))*sign(pc-ps);
                qv == (xv_0+xv)*xv_max*sqrt(2/rho)*sqrt(abs(ps-pc))*sign(ps-pc);
                q == qv - (xv_0-xv)*xv_max*sqrt(2/rho)*sqrt(abs(pc))*sign(pc) - q_leak;
                qs == qv - q*Ar/Ah;
            end
            pc.der == bulk*((q-Ah*vp)/(V0+Ah*xp));
        end
       
        xp_out == xp;
        flowC == q;
        pC == pc;
        mforce == (Ah*pc-Ar*ps);
    end
end
annotations
    Icon = 'threeway_valve_monochamber_piston.jpg';
end
end
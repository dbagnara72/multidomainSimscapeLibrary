component differential_gear
% differential_gear.ssc 
%
%     
nodes
    S1 = foundation.mechanical.rotational.rotational; % s1:left
    S2 = foundation.mechanical.rotational.rotational; % s2:left
    Sp = foundation.mechanical.rotational.rotational; % sp:right
end

parameters
    b1 = { 1e-3, '(N*m)*s/rad'};        % b1
    J1 = { 0.5, 'kg*m^2' };             % J1
    b2 = { 11e-3, '(N*m)*s/rad'};       % b2
    J2 = { 0.5, 'kg*m^2' };             % J2    
    bp = { 1e-3, '(N*m)*s/rad'};        % bp
    Jp = { 0.5, 'kg*m^2' };             % Jp
    k_theta = { 1e5, 'N*m/rad' };       % k_theta
end

variables
    omega1 = { 0, 'rad/s' };                % omega1
    omega2 = { 0, 'rad/s' };                % omega2
    omegap = { 0, 'rad/s' };                % omegap
    tau_1 = { 0, 'N*m' };                   % tau_1
    tau_2 = { 0, 'N*m' };                   % tau_2
    tau_p = { 0, 'N*m' };                   % tau_p
    tau_m = { 0, 'N*m' };                   % tau_m
    tau_theta_1p = { 0, 'N*m' };            % tau_theta_1p
    tau_theta_2p = { 0, 'N*m' };            % tau_theta_2p
end

branches
    tau_1 : S1.t ->*;    
    tau_2 : S2.t ->*;    
    tau_p : Sp.t ->*;    
end

equations
    omega1 == S1.w;
    omega2 == S2.w;
    omegap == Sp.w;

%     omegap == 1/2*(omega1+omega2);
    tau_m*omegap + tau_theta_1p*omega1 + tau_theta_2p*omega2 == 0;
    omegap.der*Jp == tau_m + tau_p - bp*omegap;
    omega1.der*J1 == tau_1 + tau_theta_1p - b1*omega1;
    omega2.der*J2 == tau_2 + tau_theta_2p - b2*omega2;
    tau_theta_1p.der == k_theta*(omega1 - omegap);
    tau_theta_2p.der == k_theta*(omega2 - omegap);

    %     omegap == 1/2*(omega1+omega2);
%     tau_m*omegap + tau_1*omega1 + tau_2*omega2 == 0;
%     omegap.der*Jp == tau_m + tau_p - bp*omegap;
%     omega1.der*J1 ==  tau_m/2 - tau_1 - b1*omega1;
%     omega2.der*J2 == tau_m/2 - tau_2 - b2*omega2;
%     tau_theta_1p.der == 0;
%     tau_theta_2p.der == 0;

end
% annotations
%     Icon = 'msm.jpg';
% end
end
component relief_valve
 % relief valve


nodes
    cA = foundation.hydraulic.hydraulic; % cA:left
    cB = foundation.hydraulic.hydraulic; % cB:right
end

variables
    qA = {0 , 'm^3/s'};             % Volumetric flow through A line
    qB = {0 , 'm^3/s'};             % Volumetric flow through B line
    dp = {0 , 'Pa'};                % Differential Pressure
    x_rv = { 0, 'm' };              % valve opening of the relef valve
    x_rv_flt = { 0, 'm' };          % filtered valve opening of the relef valve
end

variables (Access=private) 
    x1 = { 0, 'm*s^2' };            % state variable of the second order filter as model of the relef valve
    x2 = { 0, 'm*s' };              % state variable of the second order filter as model of the relef valve
end

branches
    qA: cA.q -> *;
    qB: cB.q -> *;
end

parameters
    dp_ref = {32, 'bar' };                 % Pressure set-point
    pnom = { 32, 'bar' };                  % Nominal Pressure
    p_set = {32, 'bar'};                   % Relief valve pressure setting
    p_reg = {12, 'bar'};                    % Relief valve regulation range
    x_rv_max = {12.0, 'mm'};                % Relief valve maximum orifice
end
parameters(Access=private) 
    a0 = {(2*pi*100)^2, '1/s^2'}                % Throttle model parameter wn^2
    a1 = {(2*2*pi*100), '1/s'}                  % Throttle model parameter 2*zeta*wn
    leak = {5e-12, 'm^3/s/Pa'};                 % Leakage factor
end

equations
    let
      k = x_rv_max/p_reg;
      p_max = p_set + p_reg;
      kq = x_rv_max*sqrt(2.0/cA.density*pnom);
      kc = x_rv_max/sqrt(2.0*cA.density*pnom);
    in   
      if dp >= p_max
          x_rv == x_rv_max;
      elseif dp <= p_set
          x_rv == 0;
      else
          x_rv == k*(dp - p_set);
      end
        
      x1.der == x2;
      x2.der == -a0 * x1 - a1 * x2 + x_rv;
      x_rv_flt == a0 * x1;

      cA.p - cB.p == dp;
      qA == dp*leak + x_rv*kq;      
      qB == -qA;
    end
end
end







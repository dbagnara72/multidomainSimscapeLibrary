component bichamber_piston_for_pump
% bichamber piston for pump

nodes
    H1 = foundation.hydraulic.hydraulic; % H1:left
    H2 = foundation.hydraulic.hydraulic; % H2:left
    P = foundation.mechanical.translational.translational;  % P:right
end
outputs
    xp_out = { 0, 'm' }; % xp:right
    vp_out = { 0, 'm/s' }; % vp:right
    mforce = { 0, 'N' }; % fm:right
    q1_out = { 0, 'l/min' }; % q1:right
    q2_out = { 0, 'l/min' }; % q2:right
    p1_out = { 0, 'bar' }; % p1:right
    p2_out = { 0, 'bar' }; % p2:right
end

parameters
    A1 = { 8e-3, 'm^2' };                   % A1
    A2 = { 4e-3, 'm^2' };                   % A2
    Lp = { 1, 'm'};                         % Lp
    mp = { 35, 'kg' };                      % Piston mp
    kp = { 0, 'N/m' };                      % Spring kp
    bp = { 0, 'N*s/m'};                     % Spring bp
    V0 = {10, 'l'}; % tank volume
end
parameters(Access=private)
    delta_xp = { 5, 'mm'};     
    tau = {0.01/(2*pi), 's'};        
    bhp = { 1e12, 'N*s/m'};  
    khp = { 1e12, 'N/m'};  
    p0 = { 125e5, 'Pa'};  
end

variables
    q1 = { 0, 'm^3/s'};   % q1
    q2 = { 0, 'm^3/s'};   % q2    
    p1 = {value = { 0, 'bar'}, priority = priority.high};     % p1
    p2 = {value = { 0, 'bar'}, priority = priority.high};     % p2
    fp = { 0, 'N' };     % fp
    vp = { 0, 'm/s' };   % vp
    xp = {value = { 0, 'm'}, priority = priority.high};     % xp
end

branches
    fp : P.f -> *;
    q1 : H1.q -> *;
    q2 : * -> H2.q;
%     q2 : H2.q -> *;
end

equations
    let
        rho = H1.density;
        bulk = H1.bulk;
    in     
        p1 == H1.p;
        p2 == H2.p;
            
        vp == P.v;
        vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
        xp.der == vp;           
        p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
        p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
            

        if (xp > Lp - delta_xp)
            vp == P.v;
            vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-khp*(xp-Lp+delta_xp)-fp);
            xp.der == vp;
            p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
            p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
        elseif (xp < delta_xp)       
            vp == P.v;
            vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-khp*(xp+Lp-delta_xp)-fp);
            xp.der == vp;         
            p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
            p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
        else
            vp == P.v;
            vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
                xp.der == vp;           
            p1.der == bulk1*((q1-A1*vp)/(V0+A1*xp));
            p2.der == bulk2*((-q2+A2*vp)/(V0-A2*(Lp-xp)));
        end
       
        xp_out == xp;
        vp_out == vp;
        q1_out == q1;
        q2_out == q2;
        p1_out == p1;
        p2_out == p2;
        mforce == (A1*p1-A2*p2);
    end
end
% annotations
%     Icon = 'icon.jpg';
% end
end






% inputs
%     xv = {0, 'mm'};      % xv:left
% end
% nodes
%     S = foundation.hydraulic.hydraulic; % S:left
%     T = foundation.hydraulic.hydraulic; % T:left
%     P = foundation.mechanical.translational.translational;  % P:right
% end
% outputs
%     xp_out = { 0, 'm' }; % xp:right
%     mforce = { 0, 'N' }; % fm:right
%     q1_out = { 0, 'l/min' }; % q1:right
%     q2_out = { 0, 'l/min' }; % q2:right
%     p1_out = { 0, 'bar' }; % p1:right
%     p2_out = { 0, 'bar' }; % p2:right
% end
% 
% parameters
%     bulk = { 1.2e9, 'Pa' };                 % Bulk Modulus
%     rho = { 850, 'kg/m^3' };                % Density
%     D1 = { 0.10, 'm' };                     % D1
%     D2 = { 0.10, 'm' };                     % D2
%     Lp = { 1, 'm'};                         % Lp
%     xv_max = { 4.00, 'mm' };                % xv max
%     mp = { 25, 'kg' };                       % Piston mp
%     kp = { 1e5, 'N/m' };                    % Spring kp
%     bp = { 200, 'N*s/m'};                   % Spring bp
% end
% parameters(Access=private)
%     delta_xv = { 0.1, 'mm'};          
%     delta_xp = { 2, 'mm'};     
%     tau = {0.01/(2*pi), 's'};        
%     bhp = { 1e12, 'N*s/m'};  
%     p0 = { 125e5, 'Pa'};  
% end
% 
% variables
%     q1 = { 0, 'm^3/s'};   % q1
%     q2 = { 0, 'm^3/s'};   % q2    
%     qin = { 0, 'm^3/s'};   % qin
%     qout = { 0, 'm^3/s'};   % qout
%     p1 = {value = { 0, 'bar'}, priority = priority.high};     % p1
%     p2 = {value = { 0, 'bar'}, priority = priority.high};     % p2
%     fp = { 0, 'N' };     % fp
%     vp = { 0, 'm/s' };   % vp
%     xp = {value = { 0, 'm'}, priority = priority.high};     % xp
% end
% 
% branches
%     fp : P.f -> *;
%     qin : S.q -> *;
%     qout: * -> T.q;
% end
% 
% equations
%     let
%         A1 = D1^2/4*pi;
%         A2 = D2^2/4*pi;
%         V0 = 2*A1*(Lp);
%         ps = S.p;
%         pt = T.p;
%         kq = xv_max*sqrt(2.0/S.density*(p0));
%         kc = xv_max^2/sqrt(2.0*S.density*(p0));    
% in
%             
%         if (xp > Lp - delta_xp)
%             vp == P.v;
%             if xv > 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 0;
%                 q2 == 0;
%                 qin == 0;
%                 qout == 0;
%             elseif xv < 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == q2;
%                 qout == q1;
%             else
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == 0;
%                 qout == 0;
%             end
%             p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
%         elseif (xp < delta_xp - Lp)       
%             vp == P.v;
%             if xv > 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);               
%                 qin == q1;
%                 qout == q2;
%             elseif xv < 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 0;
%                 q2 == 0;
%                 qin == 0;
%                 qout == 0;
%             else
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-bhp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == 0;
%                 qout == 0;
%             end
%             p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
%         else
%             vp == P.v;
%             if xv > 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);              
%                 qin == q1;
%                 qout == q2;
%             elseif xv < 0
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == q2;
%                 qout == q1;
%             else
%                 vp.der == 1/mp*((A1*p1-A2*p2)-bp*vp-kp*xp-fp);
%                 xp.der == vp;
%                 q1 == 2*xv*kq-2*kc*(p1-ps/2);
%                 q2 == 2*xv*kq+2*kc*(p2-ps/2);
%                 qin == 0;
%                 qout == 0;
%             end
%             p1.der == bulk*((q1-A1*vp)/(V0+A1*xp));
%             p2.der == bulk*((-q2+A2*vp)/(V0+A2*(-xp)));
%         end
%        
%         xp_out == xp;
%         q1_out == q1;
%         q2_out == q2;
%         p1_out == p1;
%         p2_out == p2;
%         mforce == (A1*p1-A2*p2);
%     end
% end
% % annotations
% %     Icon = 'fourway_valve_bichamber_piston_open.jpg';
% % end
% end
component im_uvw
% im in three phase representation


    nodes
        S = foundation.mechanical.rotational.rotational; % S:right
        
        uu_p = foundation.electrical.electrical; % uu_p:left
        uv_p = foundation.electrical.electrical; % uv_p:left
        uw_p = foundation.electrical.electrical; % uw_p:left

        uu_n = foundation.electrical.electrical; % uu_n:left
        uv_n = foundation.electrical.electrical; % uv_n:left
        uw_n = foundation.electrical.electrical; % uw_n:left
    end

    outputs
        isu_out = { 0, 'A' };               % isu:right
        isv_out = { 0, 'A' };               % isv:right
        isw_out = { 0, 'A' };               % isw:right

        iru_out = { 0, 'A' };               % iru:right
        irv_out = { 0, 'A' };               % irv:right
        irw_out = { 0, 'A' };               % irw:right
        
        isd_out = { 0, 'A' };               % isd:right
        isq_out = { 0, 'A' };               % isq:right
        ird_out = { 0, 'A' };               % ird:right
        irq_out = { 0, 'A' };               % irq:right

        psi_s_u_out = { 0, 'V*s' };         % psi_s_u:right
        psi_s_v_out = { 0, 'V*s' };         % psi_s_v:right
        psi_s_w_out = { 0, 'V*s' };         % psi_s_w:right
        
        psi_r_u_out = { 0, 'V*s' };         % psi_r_u:right
        psi_r_v_out = { 0, 'V*s' };         % psi_r_v:right
        psi_r_w_out = { 0, 'V*s' };         % psi_r_w:right
    
        psi_s_d_out = { 0, 'V*s' };         % psi_s_d:right
        psi_s_q_out = { 0, 'V*s' };         % psi_s_q:right
        psi_r_d_out = { 0, 'V*s' };         % psi_r_d:right
        psi_r_q_out = { 0, 'V*s' };         % psi_r_q:right

        omega_m_out = { 0, 'rad/s' };       % rotor_speed(electrical):right
        theta_m_out = { 0, 'rad' };         % rotor_phase(electrical):right
        tau_m_out = { 0, 'N*m' };           % Electromagnetic torque:right
    end

    parameters
        Lm = {0.00532612, 'H'};          % Lm
        Rs = {0.00221333,'Ohm'};         % Rs
        Lr = {0.00544522, 'H'};          % Lr
        Ls = {0.00544522, 'H'};          % Ls
        Rr = {0.00473653,'Ohm'};         % Rr
        Jm = { 1, 'kg*m^2' };            % J
        bm = { 0.05, 'N*m/(rad/s)' };    % bm
        pp = { 3, '1' };                 % pole pairs
    end

    variables(Access = private)
        omega_m = { 0, 'rad/s' };               % Rotor speed (electrical)
        isu = { 0, 'A' };                       % isu
        isv = { 0, 'A' };                       % isv
        isw = { 0, 'A' };                       % isw
        iru = { 0, 'A' };                       % iru
        irv = { 0, 'A' };                       % irv
        irw = { 0, 'A' };                       % irw
        ird = { 0, 'A' };                       % ird
        irq = { 0, 'A' };                       % irq
        isd = { 0, 'A' };                       % isd
        isq = { 0, 'A' };                       % isq
        uu = { 0, 'V' };                        % uu
        uv = { 0, 'V' };                        % uv
        uw = { 0, 'V' };                        % uw
        psi_s_u = { 0, 'V*s' };                 % psi_s_u
        psi_s_v = { 0, 'V*s' };                 % psi_s_v
        psi_s_w = { 0, 'V*s' };                 % psi_s_w
        psi_r_u = { 0, 'V*s' };                 % psi_r_u
        psi_r_v = { 0, 'V*s' };                 % psi_r_v
        psi_r_w = { 0, 'V*s' };                 % psi_r_w
        psi_r_d = { 0, 'V*s' };                 % psi_r_d
        psi_r_q = { 0, 'V*s' };                 % psi_r_q
        psi_s_d = { 0, 'V*s' };                 % psi_s_d
        psi_s_q = { 0, 'V*s' };                 % psi_s_q
        tau_m = { 0, 'N*m' };                   % Torque electromagnetic
        tau_l = { 0, 'N*m' };                   % Torque load
        theta_m = { 0, 'rad' };                 % Rotor position (electrical)
    end

    branches
        isu : uu_p.i -> uu_n.i;
        isv : uv_p.i -> uv_n.i;
        isw : uw_p.i -> uw_n.i;
        tau_l : S.t ->*; 
    end

    equations
        let

        in
            uu == uu_p.v - uu_n.v;
            uv == uv_p.v - uv_n.v;
            uw == uw_p.v - uw_n.v;

            omega_m == pp*S.w % rotor speed electrical

            uu == Rs*isu + psi_s_u.der;
            uv == Rs*isv + psi_s_v.der;
            uw == Rs*isw + psi_s_w.der;
        
            0 == Rr*iru + psi_r_u.der;
            0 == Rr*irv + psi_r_v.der;
            0 == Rr*irw + psi_r_w.der;

            psi_s_u == 2/3*(Ls*isu - 0.5*Lm*isv - 0.5*Lm*isw + ...
                    Lm*(iru*cos(theta_m) + irv*cos(theta_m + 2*pi/3) + irw*cos(theta_m - 2*pi/3)));
            psi_s_v == 2/3*(-0.5*Lm*isu + Ls*isv - 0.5*Lm*isw + ...
                    Lm*(iru*cos(theta_m - 2*pi/3) + irv*cos(theta_m) + irw*cos(theta_m + 2*pi/3)));
            psi_s_w == 2/3*(-0.5*Lm*isu - 0.5*Lm*isv + Ls*isw + ...
                    Lm*(iru*cos(theta_m + 2*pi/3) + irv*cos(theta_m - 2*pi/3) + irw*cos(theta_m)));

            psi_r_u == 2/3*(Lr*iru - 0.5*Lm*irv - 0.5*Lm*irw + ...
                    Lm*(isu*cos(theta_m) + isv*cos(theta_m - 2*pi/3) + isw*cos(theta_m + 2*pi/3)));
            psi_r_v == 2/3*(-0.5*Lm*iru + Lr*irv - 0.5*Lm*irw + ...
                    Lm*(isu*cos(theta_m + 2*pi/3) + isv*cos(theta_m) + isw*cos(theta_m - 2*pi/3)));
            psi_r_w == 2/3*(-0.5*Lm*iru - 0.5*Lm*irv + Lr*irw + ...
                    Lm*(isu*cos(theta_m - 2*pi/3) + isv*cos(theta_m + 2*pi/3) + isw*cos(theta_m)));

            tau_m == -pp*2/3*Lm*((isu*(iru-0.5*irv-0.5*irw)+isv*(irv-0.5*iru-0.5*irw)+...
                isw*(irw-0.5*irv-0.5*iru))*sin(theta_m) + ...
                sqrt(3)/2*(isu*(irv-irw) + isv*(irw-iru) + isw*(iru-irv))*cos(theta_m));
            
            Jm * omega_m.der == pp*(tau_m + tau_l) - bm*omega_m;
            theta_m.der == omega_m; 
            
            % ancillary outputs
            psi_r_d == 2/3*(psi_r_u*cos(theta_m) + psi_r_v*cos(theta_m - 2*pi/3) + psi_r_w*cos(theta_m + 2*pi/3));
            psi_r_q == -2/3*(psi_r_u*sin(theta_m) + psi_r_v*sin(theta_m - 2*pi/3) + psi_r_w*sin(theta_m + 2*pi/3));

            psi_s_d == 2/3*(psi_s_u*cos(theta_m) + psi_s_v*cos(theta_m - 2*pi/3) + psi_s_w*cos(theta_m + 2*pi/3));
            psi_s_q == -2/3*(psi_s_u*sin(theta_m) + psi_s_v*sin(theta_m - 2*pi/3) + psi_s_w*sin(theta_m + 2*pi/3));

            ird == 2/3*(iru*cos(theta_m) + irv*cos(theta_m - 2*pi/3) + irw*cos(theta_m + 2*pi/3));
            irq == -2/3*(iru*sin(theta_m) + irv*sin(theta_m - 2*pi/3) + irw*sin(theta_m + 2*pi/3));

            isd == 2/3*(isu*cos(theta_m) + isv*cos(theta_m - 2*pi/3) + isw*cos(theta_m + 2*pi/3));
            isq == -2/3*(isu*sin(theta_m) + isv*sin(theta_m - 2*pi/3) + isw*sin(theta_m + 2*pi/3));

            isu_out == isu;
            isv_out == isv;
            isw_out == isw;
    
            iru_out == iru;
            irv_out == irv;
            irw_out == irw;

            isd_out == isd;
            isq_out == isq;
            ird_out == ird;
            irq_out == irq;

            psi_s_u_out == -psi_s_u;
            psi_s_v_out == -psi_s_v;
            psi_s_w_out == -psi_s_w;
            
            psi_r_u_out == -psi_r_u;
            psi_r_v_out == -psi_r_v;
            psi_r_w_out == -psi_r_w;

            psi_s_d_out == psi_s_d;
            psi_s_q_out == psi_s_q;
            psi_r_d_out == psi_r_d;
            psi_r_q_out == psi_r_q;

            omega_m_out == omega_m;
            theta_m_out == mod(theta_m + 3*pi, 2*pi) - pi;
            tau_m_out == tau_m;
           
        end
    end
end

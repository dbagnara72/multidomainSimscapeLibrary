component threephase_inductor_with_saturation
% threephase inductor with saturation
%
% Model description:
%
% L0 = La - 2Lm
%
% Lp = La + Lm
%
% To disable saturation effect set i-base to inf.

    nodes
        up1 = foundation.electrical.electrical;            % u1:left
        vp1 = foundation.electrical.electrical;            % v1:left
        wp1 = foundation.electrical.electrical;            % w1:left
        up2 = foundation.electrical.electrical;            % u2:right
        vp2 = foundation.electrical.electrical;            % v2:right
        wp2 = foundation.electrical.electrical;            % w2:right
    end

    outputs
        psi_u_out = {0, 'V*s'};       % psi-u
        psi_v_out = {0, 'V*s'};       % psi-v
        psi_w_out = {0, 'V*s'};       % psi-w
    end

    parameters
        Lp = {300e-6, 'H'};       % Inductance Positive Sequence
        L0 = {20e-6, 'H'};        % Inductance Zero Sequence
        Rp = {2.4e-3, 'Ohm'};     % Resistance Positive Sequence
        R0 = {0.8e-3, 'Ohm'};     % Resistance Zero Sequence
        Lls = {5e-6, 'H'};        % Leakage Inductance
        i_base = {360, 'A'};        % Base Current (Arms) : i_base
    end

    variables
        uu_1 = { 0, 'V' };              % uu_1 
        uv_1 = { 0, 'V' };              % uv_1 
        uw_1 = { 0, 'V' };              % uw_1 

        uu_2 = { 0, 'V' };              % uu_2 
        uv_2 = { 0, 'V' };              % uv_2 
        uw_2 = { 0, 'V' };              % uw_2 

        iu = { 0, 'A' };              % iu 
        iv = { 0, 'A' };              % iv 
        iw = { 0, 'A' };              % iw 

        psi_u = {value = {0, 'V*s'}, priority = priority.high };         % psi_u      
        psi_v = {value = {0, 'V*s'}, priority = priority.high };         % psi_v      
        psi_w = {value = {0, 'V*s'}, priority = priority.low };         % psi_w    

        ku_La_saturation = {value = {1, '1'}, priority = priority.high };         % ku_La_saturation  
        kv_La_saturation = {value = {1, '1'}, priority = priority.high };         % kv_La_saturation  
        kw_La_saturation = {value = {1, '1'}, priority = priority.high };         % kw_La_saturation  
        ku_Lm_saturation = {value = {1, '1'}, priority = priority.high };         % ku_Lm_saturation  
        kv_Lm_saturation = {value = {1, '1'}, priority = priority.high };         % kv_Lm_saturation  
        kw_Lm_saturation = {value = {1, '1'}, priority = priority.high };         % kw_Lm_saturation  
        
        Lau_actual = { 0, 'H' };         % Lau_actual 
        Lav_actual = { 0, 'H' };         % Lav_actual 
        Law_actual = { 0, 'H' };         % Law_actual 
        Lmu_actual = { 0, 'H' };         % Lmu_actual 
        Lmv_actual = { 0, 'H' };         % Lmv_actual 
        Lmw_actual = { 0, 'H' };         % Lmw_actual 

        iu_pos_norm = { 0, '1' };         % iu_pos_norm  
        iv_pos_norm = { 0, '1' };         % iv_pos_norm  
        iw_pos_norm = { 0, '1' };         % iw_pos_norm  
    end

    parameters(Access=private) 
        % La_saturation = {[1, 1, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.1], '1'};
        % Lm_saturation = {[1, 1, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.1], '1'};
        La_saturation = {[1, 1, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.25, 0.2, 0.2], '1'};
        Lm_saturation = {[1, 1, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.25, 0.2, 0.2], '1'};
        Normalized_current = {[0, 1.0, 1.35, 1.45, 1.55, 1.65, 1.75, 1.85, 1.95, 2.05, 2.15, 2.25, 2.35], '1'};
    end


    branches
        iu : up1.i -> up2.i;
        iv : vp1.i -> vp2.i;
        iw : wp1.i -> wp2.i;
    end

    equations
        let
            Lm = (Lp-L0)/3;
            La = (L0+Lp+Lm)/2;
            Rs = Rp;
        in   
            iu_pos_norm == abs(iu/i_base/sqrt(2));
            iv_pos_norm == abs(iv/i_base/sqrt(2));
            iw_pos_norm == abs(iw/i_base/sqrt(2));

            ku_La_saturation == tablelookup(Normalized_current, La_saturation, iu_pos_norm,...
                interpolation = linear, extrapolation = nearest);
            kv_La_saturation == tablelookup(Normalized_current, La_saturation, iv_pos_norm,...
                interpolation = linear, extrapolation = nearest);
            kw_La_saturation == tablelookup(Normalized_current, La_saturation, iw_pos_norm,...
                interpolation = linear, extrapolation = nearest);
            ku_Lm_saturation == tablelookup(Normalized_current, Lm_saturation, iu_pos_norm,...
                interpolation = linear, extrapolation = nearest);
            kv_Lm_saturation == tablelookup(Normalized_current, Lm_saturation, iv_pos_norm,...
                interpolation = linear, extrapolation = nearest);
            kw_Lm_saturation == tablelookup(Normalized_current, Lm_saturation, iw_pos_norm,...
                interpolation = linear, extrapolation = nearest);
            
            Lau_actual == La*ku_La_saturation;
            Lav_actual == La*kv_La_saturation;
            Law_actual == La*kw_La_saturation;
            Lmu_actual == Lm*ku_Lm_saturation;
            Lmv_actual == Lm*kv_Lm_saturation;
            Lmw_actual == Lm*kw_Lm_saturation;   

            uu_1 == up1.v;
            uv_1 == vp1.v;
            uw_1 == wp1.v;
            
            uu_2 == up2.v;
            uv_2 == vp2.v;
            uw_2 == wp2.v;

            uu_1 - Rs*iu - uu_2 -psi_u.der == 0;
            uv_1 - Rs*iv - uv_2 -psi_v.der == 0;
            uw_1 - Rs*iw - uw_2 -psi_w.der == 0;

            % uu_1 - R*iu - (Lls+La)*iu.der + Lm*iv.der + Lm*iw.der - uu_2 == 0;
            % uv_1 - R*iv - (Lls+La)*iv.der + Lm*iu.der + Lm*iw.der - uv_2 == 0;
            % uw_1 - R*iw - (Lls+La)*iw.der + Lm*iu.der + Lm*iv.der - uw_2 == 0;
            
            uu_1 - Rs*iu - (Lls+Lau_actual)*iu.der + Lmv_actual*iv.der + Lmw_actual*iw.der - uu_2 == 0;
            uv_1 - Rs*iv - (Lls+Lav_actual)*iv.der + Lmu_actual*iu.der + Lmw_actual*iw.der - uv_2 == 0;
            uw_1 - Rs*iw - (Lls+Law_actual)*iw.der + Lmu_actual*iu.der + Lmv_actual*iv.der - uw_2 == 0;

            psi_u_out == psi_u;
            psi_v_out == psi_v;
            psi_w_out == psi_w;
        end
    end
end

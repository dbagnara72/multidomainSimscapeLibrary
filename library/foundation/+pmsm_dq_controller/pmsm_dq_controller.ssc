component pmsm_dq_controller
% pmsm dq controller

    inputs
        omega_m = { 0, 'rad/s' }; % __Speed__ :left
        id = { 0, 'A' };  % _id_ :left
        iq = { 0, 'A' };  % _iq_ :left
        ed = { 0, 'V' };  % _ed_ :left
        eq = { 0, 'V' };  % _eq_ :left
        udc = { 0, 'V' };  % _udc_ :left
    end
    
    outputs
        ud_out = { 0, 'V' }; % _ud_ :right
        uq_out = { 0, 'V' }; % _uq_ :right
    end
    
    inputs
        omega_ref = { 0, 'rpm' }; % _Speed-Set-Point_ :left
        torque_ref = { 0, 'N*m' }; % _Torque-Set-Point_ :left
    end

    parameters 
        Speed_mode = simscape.enum.onoff.on;        % Speed mode Control
        TorqueLim = simscape.enum.onoff.on;         % Enable Torque Limit
        emf_nom = {326.0, 'V'}                      % Nominal No-load Voltage (PHASE PEAK)
        udc_nom = {720.0, 'V'}                      % Nominal Vdc Voltage
        i_nom = {650,'A'};                          % Nominal Current (PHASE PEAK)
        omega_m_nom = {157,'rad/s'};                % Nominal Speed
        poles = {8,'1'};                            % Number of Poles
        Rs = {0.0075,'Ohm'};                         % Phase Resistance
        Ld = {0.00175, 'H'};                         % Ld - Inductance
        Lq = {0.0025, 'H'};                          % Lq - Inductance
        phi_m = {0.52, 'V*s'};                       % Magnet Flux
        kp_w = {1,'1'};                             % kp - Speed Ctrl
        ki_w = {1,'1/s'};                           % ki - Speed Ctrl
        kp_i = {1,'1'};                             % kp - Current Ctrl
        ki_i = {20,'1/s'};                          % ki - Current Ctrl
        kp_fw = {0.1,'1'};                          % kp - fw Ctrl
        ki_fw = {2,'1/s'};                          % ki - fw Ctrl
    end
    parameters (Access=private)
        psi_ref = {1, '1'};          % 
    end
    variables(Access=private)
        ud = { 0, '1' }; 
        uq = { 0, '1' }; 
        ug = { 0, '1' }; 
        ud_i = { 0, '1' }; 
        uq_i = { 0, '1' }; 
        id_ref = { 0, '1' }; 
        id_ref_mtpa = { 0, '1' }; 
        iq_ref = { 0, '1' }; 
        id_ref_i = { 0, '1' }; 
        iq_ref_i = { 0, '1' }; 
        iq_ref_out = { 0, '1' }; 
        omega_bez = { 0, 'rad/s' };
        omega = { 0, 'rad/s' };
    end

    equations
        let
            cp = poles/2;
            Ubez = emf_nom;
            Udc_bez = udc_nom;
            Ibez = i_nom;
            Xbez = Ubez/Ibez;
            Lbez = Xbez/omega_bez;
            Rs_norm = Rs/Xbez;
            Ld_norm = Ld/Lbez;
            Lq_norm = Lq/Lbez;
            psi_bez = Ubez/omega_bez;
            phi_norm = phi_m*psi_ref/psi_bez;
            iq_lim = (torque_ref/(3/2*cp*phi_m*psi_ref))/Ibez;  
            ug_max = sqrt(3)/2*0.9;
        in       
            
            omega_bez == omega_m_nom * cp;
            omega == cp * omega_m;
            
            % controller - speed and torque (current)
            if Ld >= Lq
                id_ref_mtpa == 0;
            else
                id_ref_mtpa == -abs((phi_m*psi_ref/2/(Lq-Ld)-...
                    sqrt((phi_m*psi_ref)^2/4/(Lq-Ld)^2+(iq)^2))/Ibez);
            end
            
            if (TorqueLim == simscape.enum.onoff.on && (iq_ref >= iq_lim))
                iq_ref_i.der == 0;
                iq_ref == kp_w * (omega_ref - omega_m)/omega_m_nom + iq_ref_i;
                iq_ref_out == iq_lim;
            elseif (TorqueLim == simscape.enum.onoff.on && (iq_ref <= -iq_lim))
                iq_ref_i.der == 0;
                iq_ref == kp_w * (omega_ref - omega_m)/omega_m_nom + iq_ref_i;
                iq_ref_out == -iq_lim;
            else
                iq_ref_i.der == ki_w * (omega_ref - omega_m)/omega_m_nom;          
                iq_ref == kp_w * (omega_ref - omega_m)/omega_m_nom + iq_ref_i;
                iq_ref_out == iq_ref;
            end
            
            if (Speed_mode == simscape.enum.onoff.on)
                ud == kp_i * (id_ref - id/Ibez) + ud_i + ed/Ubez - omega/omega_bez * Lq_norm * iq/Ibez;
                ud_i.der == ki_i * (id_ref - id/Ibez);
                uq == kp_i * (iq_ref_out - iq/Ibez) + uq_i + eq/Ubez + omega/omega_bez * Ld_norm * id/Ibez;
                uq_i.der == ki_i * (iq_ref_out - iq/Ibez); 
            else
                ud == kp_i * (id_ref - id/Ibez) + ud_i + ed/Ubez - omega/omega_bez * Lq_norm * iq/Ibez;
                ud_i.der == ki_i * (0-id/Ibez);
                uq == kp_i * (iq_ref - iq/Ibez) + uq_i + eq/Ubez + omega/omega_bez * Ld_norm * id/Ibez;
                uq_i.der == ki_i * (iq_lim - iq/Ibez);  
            end
            
            % field weakening
            ug == sqrt(ud^2+uq^2);
            id_ref_i.der == ki_fw * (ug_max - ug);          
            id_ref == min(kp_fw * (ug_max - ug) + id_ref_i,id_ref_mtpa);
            
            % outputs
            ud_out == ud*udc*ug_max;
            uq_out == uq*udc*ug_max;
        end
    end
end

component variable_displacement_pump
% Variable displacement pump :


inputs
    Vd = {0, '1'}; % Vd:left
end

outputs
    Q = { 0, 'l/min' }; % Q:right
end

nodes
    C = foundation.mechanical.rotational.rotational; % C:left
    A = foundation.hydraulic.hydraulic; % A:right
    B = foundation.hydraulic.hydraulic; % B:right    
end

variables(Access=private)   
    t = { 0, 'N*m' };               % Torque through
    q = {0 , 'm^3/s'};              % Volumetric flow through A line
    qt = {0 , 'm^3/s'};             % Volumetric flow through B line
    Dv = {0 , 'cm^3/rev'};          % Volumetric displacement
    Phyd = {0 , 'kW'};              % Hydraulic power
    Pmech = {0 ,'kW'};              % Mechanical power
end

parameters
%     inertia_model =  simscape.enum.onoff.off;           % Enable system inertia
    eta_mech = { 0.909, '1' };                          % Mechanical efficiency
    eta_vol = { 0.959, '1' };                           % Volumetric efficiency
    leak = {0.0, 'm^3/(Pa*s)'};                         % Leakage coefficient
end

parameters(Access=Private)
    max_w = {3100, 'rpm'};                      % Maximum allowed input rotational speed
    max_Dv = {150, 'cm^3/rev'};                 % Maximum allowed volumetric displacement
    max_P = {480, 'bar'};                       % Maximum allowed working pressure
    max_T = {2.34, 'N*m/bar'};                  % Theoretical maximum torque at maximum displacement
    inertia_pump = {0.027, 'kg*m^2'};           % Mass moment of Inertia of rotating components
    m_dry = {96, 'kg'};                         % System mass (dry - no charge pump)
    oil_vol = {3, 'l'};                         % Oil volume
end

branches
    q: A.q -> *;
    t: C.t -> *;
    qt: B.q -> *;
end

% if inertia_model == simscape.enum.onoff.on;
%     components(ExternalAccess = observe)
%        pump_inertia = foundation.mechanical.rotational.inertia(inertia = inertia_pump); 
%     end
%     connections
%         connect(C,pump_inertia.I)
%     end
% end

equations
%     assert(Vd~=0)
    Dv == Vd*max_Dv;
    A.p - B.p == eta_mech*t/(Dv); 
    q == -C.w*(Dv)*eta_vol + leak*(A.p - B.p);
    qt == - q; 
    Pmech == C.w*t;
    Phyd == Pmech*(eta_mech*eta_vol);
    Q == q;
    
%     assert(abs(C.w)<=max_w, 'Maximum rotation speed overcome at the hydraulic pump');
%     assert(abs(Dv)<=max_Dv, 'Maximum allowed volumetric displacement overcome at the hydraulic pump');
%     assert(abs(A.p - B.p)<=max_P, 'Maximum working pressure overcome at the hydraulic pump');
end

% annotations
%     Icon = 'variable_displacement_pump.png';
% end

end

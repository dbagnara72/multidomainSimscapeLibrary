component single_phase_transformer
% single phase transformer

    nodes
        u1_p = foundation.electrical.electrical; % u1(+):left
        u1_n = foundation.electrical.electrical; % u1(-):left        
        u2_p = foundation.electrical.electrical; % u2(+):right
        u2_n = foundation.electrical.electrical; % u2(-):right
    end
    
    outputs
%         Bc = { 0, 'Wb/m^2' }; % _Bc_:right
%         i1_out = { 0, 'A' }; % _i1_:right
%         i2_out = { 0, 'A' }; % _i2_:right
%         u1_out = { 0, 'V' }; % _u1_:right
%         u2_out = { 0, 'V' }; % _u2_:right
%         phi_out = { 0, 'V*s' }; % _phi_:right
    end

    parameters
        Lm = {1.8e-3, 'H'};                  % Lm1
        n1 = {16, '1'};                      % n1
        n2 = {1, '1'};                       % n2
        Rd1 = {2e-3, 'Ohm'};                 % Rd1
        Rd2 = {7.81e-06, 'Ohm'};             % Rd2
        Ld1 = {6e-6, 'H'};                   % Ld1
        Ld2 = {2.34e-08, 'H'};               % Ld2
        Rfe = {4e3, 'Ohm'};                  % Rfe1
    end

    variables
        phi = { 0, 'V*s' };                     % phi
        i1 = { 0, 'A' };                        % i1
        i2 = { 0, 'A' };                        % i2
        ife = { 0, 'A' };                       % ife
        u1 = { 0, 'V' };                        % u1
        u2 = { 0, 'V' };                        % u2  
    end


    branches
        i1 : u1_p.i -> u1_n.i;
        i2 : u2_p.i -> u2_n.i;
    end

    equations
        let
            Reluctance = (n1/n2)^2/Lm;
        in
            u1 == u1_p.v - u1_n.v;
            u2 == u2_p.v - u2_n.v;

            % Reluctance * phi == (-n1 * (i1-ife) + n2 * i2);
            % u1 - Rd1 * i1 - Ld1 * i1.der + n1 * phi.der == 0;
            % u2 - Rd2 * i2 - Ld2 * i2.der - n2 * phi.der == 0;
            % ife == (u1 - Rd1 * i1 - Ld1 * i1.der) / Rfe;

            Reluctance * phi == (-n1 * (i1-ife) + n2 * i2);
            u1 - Rd1 * i1 - Ld1 * i1.der + n1 * phi.der == 0;
            u2 - Rd2 * i2 - Ld2 * i2.der - n2 * phi.der == 0;
            ife == (u1 - Rd1 * i1 - Ld1 * i1.der) / Rfe;

%             i1_out == i1;
%             i2_out == i2;        
%             u1_out == u1;
%             phi_out == phi;
%             Bc == (n1 * (i1-ife) + n2 * i2) / lm * (mu0 * mur);
        end
    end
end

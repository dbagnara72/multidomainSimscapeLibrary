component pmsm_dq2
% pmsm_dq2
% 
% Outputs Voltage and Current are in PEAK
    
    inputs
        ud = { 0, 'V' }; % __ud__ :left
        uq = { 0, 'V' }; % __uq__ :left
    end
    
    outputs
        omega_out = { 0, 'rad/s' }; %__omega_m__ :right
        tau_m = { 0, 'N*m' }; % __tau_e__ :right
        ig_out = { 0, 'A' }; % __ig__ :right
        id_out = { 0, 'A' }; % __id__ :right
        iq_out = { 0, 'A' }; % __iq__ :right
        psi_d_out = { 0, 'V*s' }; % __psi_d__ :right
        psi_q_out = { 0, 'V*s' }; % __psi_q__ :right
        ed_out = { 0, 'V' }; % __ed__ :right
        eq_out = { 0, 'V' }; % __eq__ :right
        vg_out = { 0, 'V' }; % __vg__ :right
        ud_out = { 0, 'V' }; % __ud__ :right
        uq_out = { 0, 'V' }; % __uq__ :right
        pin_out = { 0, 'kW' }; % __pin__ :right
    end
    
    nodes
       C = foundation.mechanical.rotational.rotational; % __C__ :left
       D = foundation.mechanical.rotational.rotational; % __D__ :right
    end

    parameters 
        emf_nom = {326.0, 'V'}          % Nominal No-load Voltage (PHASE PEAK)
        i_nom = {650,'A'};              % Nominal Current (PHASE PEAK)
        omega_nom = {157,'rad/s'};      % Nominal Mechanical Speed
        poles = {8,'1'};                % Number of Poles
        Rs = {0.0075,'Ohm'};             % Phase Resistance
        Ld = {0.00175, 'H'};             % Ld - Inductance
        Lq = {0.0025, 'H'};             % Lq - Inductance
        phi_m = {0.52, 'V*s'};           % Magnet Flux
        J = { 7.5, 'kg*m^2' };          % Rotor Inertia
        b = { 0.1, '(N*m)*s/rad'};      % Viscosity of the Shaft
    end
    
    parameters (Access=private)
        phi_ref = {1, '1'};          % Magnet Flux (Wb)
    end
    
    variables(Access=private)
        omega_m = { 0, 'rad/s' };   
        tau_load = { 0, 'N*m' };     
        id = { 0, 'A' }; 
        iq = { 0, 'A' };         
        phi_d = {value = phi_m, priority = priority.high}; % MUST be set with high priority
        phi_q = {value = { 0 , 'V*s' }, priority = priority.high}; % MUST be set with high priority
    end

    branches
        tau_load : D.t ->*; 
    end
    equations
        let
            cp = poles/2;
        in
     
            omega_m == D.w - C.w;
                      
            ud - Rs * id - Ld * id.der + cp * omega_m * Lq * iq + cp * omega_m * phi_q == 0;
            uq - Rs * iq - Lq * iq.der - cp * omega_m * Ld * id - cp * omega_m * phi_d == 0;
            phi_d.der == 0;
            phi_q.der == 0;
            tau_m == 3/2 * cp * (phi_ref * phi_m * iq + (Ld - Lq) * id * iq);
            J*omega_m.der == tau_m + tau_load - b*omega_m;;

            ig_out == sqrt(id^2+iq^2)/sqrt(2);
            id_out == id;
            iq_out == iq;
            psi_d_out == phi_d + Ld*id;
            psi_q_out == phi_q + Lq*iq;
            ed_out == -cp*omega_m*phi_q;
            eq_out == cp*omega_m*phi_d;
            omega_out == omega_m;
            vg_out == sqrt(ud^2+uq^2)/sqrt(2);
            ud_out == ud;
            uq_out == uq;
            pin_out == 3/2*(uq*iq + ud*id);
        end
    end
end

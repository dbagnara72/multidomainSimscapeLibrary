component simple_magnetic_bearing
% simple magnetic bearing model

    nodes
        u1_p = foundation.electrical.electrical;                % u1+:left
        u1_n = foundation.electrical.electrical;                % u1-:left
        u2_p = foundation.electrical.electrical;                % u2+:left
        u2_n = foundation.electrical.electrical;                % u2-:left
        s = foundation.mechanical.translational.translational;  % s:right
    end
    
    outputs
        f1_out = { 0, 'N' };    % f1:right
        f2_out = { 0, 'N' };    % f2:right
        y_out = { 0, 'm' };     % y:right
        v_out = { 0, 'm/s' };   % v:right
    end

    parameters
        air_gap = {4.5e-3, 'm'};            % air_gap
        dy_lim = {2e-3, 'm'};               % dy_lim
        R1 = {10, 'Ohm'};                   % R1
        R2 = {10, 'Ohm'};                   % R2
        lambda1 = {1e-4, 'H*m'};            % lambda1
        lambda2 = {1e-4, 'H*m'};            % lambda2
        m = { 0.5, 'kg' };                  % m
        g = { 10, 'm/s^2' };                % g
        sigma = { 1, 'N*s/m' };             % friction
    end
    parameters(Access=private)
        sigma_runaway = { 1e6, 'N*s/m' };      % friction for runaway
    end
    variables
        y = { 0, 'm' };               % vertical position
        v = { 0, 'm/s' };             % vertical speed
        i1 = { 0, 'A' };              % i1
        i2 = { 0, 'A' };              % i2
        u1 = { 0, 'V' };              % u1
        u2 = { 0, 'V' };              % u2
        L1 = {0.022, 'H'};            % L1
        L2 = {0.022, 'H'};            % L2
        f1 = {0, 'N'};                % f1
        f2 = {0, 'N'};                % f2
        fload = {0, 'N'};             % fload
    end


    branches
        i1 : u1_p.i -> u1_n.i;
        i2 : u2_p.i -> u2_n.i;
        fload : s.f ->*; 
    end

    equations
        let
            
        in
            u1 == u1_p.v - u1_n.v;
            u2 == u2_p.v - u2_n.v;
            v == s.v;

            if (abs(y) <= dy_lim)
                m*v.der == f1 - f2 - m*g + fload - sigma*v;
                y.der == v;
    
                u1 == R1*i1 + L1*i1.der + i1*L1.der;
                u2 == R2*i2 + L2*i2.der + i2*L2.der;
    
                L1.der == lambda1/(air_gap - y)^2*v;
                L2.der == -lambda2/(air_gap + y)^2*v;
                
                f1 == lambda1*i1^2/(air_gap - y)^2;
                f2 == lambda2*i2^2/(air_gap + y)^2;
            else
                m*v.der == f1 - f2 - m*g + fload - sigma*v - sigma_runaway*v;
                y.der == v;

                u1 == R1*i1 + L1*i1.der + i1*L1.der;
                u2 == R2*i2 + L2*i2.der + i2*L2.der;
    
                L1.der == lambda1/(air_gap - y)^2*v;
                L2.der == -lambda2/(air_gap + y)^2*v;
                
                f1 == lambda1*i1^2/(air_gap - y)^2;
                f2 == lambda2*i2^2/(air_gap + y)^2;
            end

            y_out == y;
            v_out == v;
            f1_out == f1;
            f2_out == f2;
        end
    end
end

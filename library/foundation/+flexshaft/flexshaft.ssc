component flexshaft
% flexible shaft 
%
% w_1.der == -(b_theta+b1)/J1*w_1 + b_theta/J1*w_2 - t_theta/J1 + t_1/J1;
% 
% w_2.der == b_theta/J2*w_1 - (b_theta+b2)/J2*w_2 + t_theta/J2 + t_2/J2;
% 
% t_theta.der == k_theta*(w_1 - w_2);
% 
% tau_theta == t_theta;
%     
nodes
    S1 = foundation.mechanical.rotational.rotational; % S1:left
    S2 = foundation.mechanical.rotational.rotational; % S2:right
end

outputs
    tau_theta = { 0, 'N*m' }; % tau_theta
    tau2 = { 0, 'N*m' }; % tau2
    w1 = { 0, 'rad/s' }; % w1
    w2 = { 0, 'rad/s' }; % w2
end
parameters
    b1 = { 1, '(N*m)*s/rad'};       % b1
    J1 = { 0.5, 'kg*m^2' };        % J1
    b2 = { 1, '(N*m)*s/rad'};       % b2
    J2 = { 0.5, 'kg*m^2' };        % J2
    b_theta = { 1, '(N*m)*s/rad'};  % b_theta
    k_theta = { 1e3, 'N*m/rad' };   % k_theta
end

variables
    w_1 = { 0, 'rad/s' };           % w1
    w_2 = { 0, 'rad/s' };           % w2
    t_1 = { 0, 'N*m' };             % tau_1
    t_2 = { 0, 'N*m' };             % tau_2
    t_theta = { 0, 'N*m' };         % tau_theta
end

branches
    t_1 : S1.t ->*;    
    t_2 : S2.t ->*;    
end

equations
    w_1 == S1.w;
    w_2 == S2.w;
    w_1.der == -(b_theta+b1)/J1*w_1 + b_theta/J1*w_2 - t_theta/J1 + t_1/J1;
    w_2.der == b_theta/J2*w_1 - (b_theta+b2)/J2*w_2 + t_theta/J2 + t_2/J2;
    t_theta.der == k_theta*(w_1 - w_2);
    
%     % outputs
    w1 == w_1;
    w2 == w_2;
    tau2 == t_2;
    tau_theta == t_theta;
end
% annotations
%     Icon = 'msm.jpg';
% end
end